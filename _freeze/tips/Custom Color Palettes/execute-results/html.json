{
  "hash": "e0707b30911f82f7efc90bbbb7e1188a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Implementing Custom Color Palettes in R\"\nformat: html\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n## Introduction\n\nWhile R has many built-in palettes, creating and implementing custom color palettes can be tricky. This guide focuses on how to effectively implement custom palettes and avoid common pitfalls.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\n## Finding Color Palettes\n\nThe [R Color Palette Finder](https://emilhvitfeldt.github.io/r-color-palettes/) is an invaluable resource showing 2000+ palettes from various R packages. Key features:\n\n-   Interactive visualization of all palettes\n-   Code snippets for implementation\n-   Filtering by colorblind friendliness\n-   Categories (sequential, diverging, qualitative)\n-   Package-specific collections\n\n## Implementing Custom Palettes\n\n### Basic Implementation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1: Direct color vector\nmy_colors <- c(\"#E69F00\", \"#56B4E9\", \"#009E73\")\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = my_colors)\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/basic-implementation-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Method 2: Named vector (for more control)\nspecies_colors <- c(\n  \"Adelie\" = \"#E69F00\",\n  \"Chinstrap\" = \"#56B4E9\",\n  \"Gentoo\" = \"#009E73\"\n)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = species_colors)\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/basic-implementation-2.png){width=672}\n:::\n:::\n\n\n\n\n### Common Errors and Solutions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Error 1: Not enough colors\nfew_colors <- c(\"#E69F00\", \"#56B4E9\")\ntry({\n  ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point() +\n    scale_color_manual(values = few_colors)\n})\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `palette()`:\n! Insufficient values in manual scale. 3 needed but only 2 provided.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Solution: Check number of categories\nn_categories <- n_distinct(penguins$species)\ncolors_needed <- colorRampPalette(c(\"#E69F00\", \"#56B4E9\", \"#009E73\"))(n_categories)\n\n# Error 2: Colors don't match factor levels\nmismatched_colors <- c(\n  \"Wrong\" = \"#E69F00\",\n  \"Names\" = \"#56B4E9\",\n  \"Here\" = \"#009E73\"\n)\ntry({\n  ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point() +\n    scale_color_manual(values = mismatched_colors)\n})\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/error-examples-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Solution: Check factor levels\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n\n\n:::\n:::\n\n\n\n\n### Creating Reusable Palette Functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function that handles different numbers of categories\nflexible_palette <- function(n) {\n  if (n <= 3) {\n    return(c(\"#E69F00\", \"#56B4E9\", \"#009E73\")[1:n])\n  } else {\n    # Create additional colors if needed\n    return(colorRampPalette(c(\"#E69F00\", \"#56B4E9\", \"#009E73\"))(n))\n  }\n}\n\n# Function that includes error checking\nrobust_palette <- function(data, variable) {\n  n_cats <- n_distinct(data[[variable]])\n  if (n_cats > 8) {\n    warning(\"More than 8 categories may be hard to distinguish\")\n  }\n  \n  base_colors <- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\",\n                   \"#0072B2\", \"#D55E00\", \"#CC79A7\", \"#999999\")\n  \n  if (n_cats <= length(base_colors)) {\n    return(base_colors[1:n_cats])\n  } else {\n    return(colorRampPalette(base_colors)(n_cats))\n  }\n}\n\n# Usage\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = robust_palette(penguins, \"species\"))\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/palette-functions-1.png){width=672}\n:::\n:::\n\n\n\n\n## Common Implementation Challenges\n\n1.  **Inconsistent Number of Categories**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to handle missing/extra categories\nmake_safe_palette <- function(data, variable, default_colors) {\n  actual_levels <- levels(data[[variable]])\n  if (is.null(actual_levels)) actual_levels <- unique(data[[variable]])\n  \n  # Check if we have colors for all levels\n  if (length(default_colors) < length(actual_levels)) {\n    warning(\"Not enough colors provided, extending palette\")\n    default_colors <- colorRampPalette(default_colors)(length(actual_levels))\n  }\n  \n  # Create named vector matching levels\n  setNames(default_colors[1:length(actual_levels)], actual_levels)\n}\n\n# Example with filtering\npenguins_subset <- penguins %>% filter(species != \"Gentoo\")\nspecies_palette <- make_safe_palette(\n  penguins_subset, \n  \"species\",\n  c(\"#E69F00\", \"#56B4E9\", \"#009E73\")\n)\n\nggplot(penguins_subset, \n       aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = species_palette)\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/category-handling-1.png){width=672}\n:::\n:::\n\n\n\n\n2.  **Fill vs. Color Scales**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using same palette for both fill and color\nmy_palette <- c(\"#E69F00\", \"#56B4E9\", \"#009E73\")\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(aes(fill = species)) +\n  geom_text(aes(color = species, \n                label = after_stat(count),\n                y = after_stat(count) + 3),\n            stat = \"count\") +\n  scale_fill_manual(values = my_palette) +\n  scale_color_manual(values = my_palette)\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/fill-color-1.png){width=672}\n:::\n:::\n\n\n\n\n3.  **Continuous vs. Discrete Scales**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a continuous palette\ncontinuous_palette <- colorRampPalette(c(\"#E69F00\", \"#009E73\"))\n\n# Compare discrete vs continuous usage\np1 <- ggplot(penguins, \n            aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +\n  geom_point() +\n  scale_color_gradientn(colors = continuous_palette(100)) +\n  ggtitle(\"Continuous Scale\")\n\np2 <- ggplot(penguins, \n            aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = continuous_palette(3)) +\n  ggtitle(\"Discrete Scale\")\n\nlibrary(patchwork)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](Custom-Color-Palettes_files/figure-html/continuous-discrete-1.png){width=672}\n:::\n:::\n\n\n\n\n## Troubleshooting Tips\n\n1.  **Check Factor Levels**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print levels to debug color matching\nstr(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n\n\n:::\n:::\n\n\n\n\n2.  **Verify Color Specifications**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to validate hex colors\nis_valid_hex <- function(x) {\n  grepl(\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\", x)\n}\n\n# Test colors\ntest_colors <- c(\"#E69F00\", \"#56B4E9\", \"invalid\", \"red\")\ndata.frame(\n  color = test_colors,\n  is_valid = sapply(test_colors, is_valid_hex)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          color is_valid\n#E69F00 #E69F00     TRUE\n#56B4E9 #56B4E9     TRUE\ninvalid invalid    FALSE\nred         red    FALSE\n```\n\n\n:::\n:::\n\n\n\n\n3.  **Debug Scale Mappings**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to show color-value mappings\nshow_palette_mapping <- function(data, variable, palette) {\n  if(is.factor(data[[variable]])) {\n    levels <- levels(data[[variable]])\n  } else {\n    levels <- unique(data[[variable]])\n  }\n  \n  if(length(palette) < length(levels)) {\n    warning(\"Not enough colors in palette\")\n  }\n  \n  data.frame(\n    value = levels,\n    color = palette[1:length(levels)]\n  )\n}\n\n# Example usage\nshow_palette_mapping(penguins, \"species\", my_colors)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      value   color\n1    Adelie #E69F00\n2 Chinstrap #56B4E9\n3    Gentoo #009E73\n```\n\n\n:::\n:::\n\n\n\n\n## Best Practices\n\n1.  Always create palette functions that handle:\n    -   Variable numbers of categories\n    -   Missing or filtered categories\n    -   Continuous vs. discrete scales\n    -   Fill and color scales consistently\n2.  Document your palette choices:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of well-documented palette\ncompany_palette <- list(\n  primary = c(\"#E69F00\", \"#56B4E9\", \"#009E73\"),\n  sequential = colorRampPalette(c(\"#E69F00\", \"#009E73\")),\n  discrete = function(n) {\n    if (n <= 3) return(c(\"#E69F00\", \"#56B4E9\", \"#009E73\")[1:n])\n    colorRampPalette(c(\"#E69F00\", \"#56B4E9\", \"#009E73\"))(n)\n  }\n)\n\n# Add metadata\nattr(company_palette, \"creation_date\") <- Sys.Date()\nattr(company_palette, \"colorblind_safe\") <- TRUE\n```\n:::\n\n\n\n\n3.  Test your palettes with:\n    -   Different numbers of categories\n    -   Both continuous and discrete scales\n    -   Various plot types\n    -   Colorblind simulation tools\n",
    "supporting": [
      "Custom-Color-Palettes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}