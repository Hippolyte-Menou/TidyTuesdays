{
  "hash": "40f2f1fa7625ebdced484b1ceafaa7b2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Saving and Reusing ggplot2 Themes Across Projects\"\nformat: html\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n## Introduction\n\nEffectively managing and reusing ggplot2 themes across projects is crucial for maintaining consistent visualizations. This guide covers different approaches to theme persistence and reuse.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n```\n:::\n\n\n\n\n## Method 1: R Package Approach\n\n### Creating a Theme Package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: R/themes.R\n\n#' Corporate theme for data visualizations\n#' \n#' @param base_size Base font size\n#' @param base_family Base font family\n#' @export\ntheme_corporate <- function(base_size = 12, base_family = \"sans\") {\n  theme_minimal(\n    base_size = base_size,\n    base_family = base_family\n  ) %+replace%\n  theme(\n    plot.title = element_text(\n      size = rel(1.3),\n      face = \"bold\",\n      margin = margin(b = 10)\n    ),\n    plot.subtitle = element_text(\n      size = rel(1.1),\n      margin = margin(b = 10)\n    ),\n    plot.caption = element_text(\n      size = rel(0.8),\n      margin = margin(t = 10)\n    )\n  )\n}\n\n#' Set corporate colors\n#' @export\ncorporate_colors <- c(\n  primary = \"#1f77b4\",\n  secondary = \"#ff7f0e\",\n  tertiary = \"#2ca02c\"\n)\n\n#' Apply corporate theme globally\n#' @export\nset_corporate_theme <- function() {\n  theme_set(theme_corporate())\n}\n```\n:::\n\n\n\n\n### Package Documentation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: DESCRIPTION\nPackage: corpthemes\nTitle: Corporate Themes for ggplot2\nVersion: 0.1.0\nAuthors@R: person(\"Your\", \"Name\", email = \"your.email@example.com\", role = c(\"aut\", \"cre\"))\nDescription: Provides consistent themes and color palettes for corporate visualizations.\nDepends: R (>= 3.5.0)\nImports: \n    ggplot2,\n    grid\nLicense: MIT\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.1.1\n```\n:::\n\n\n\n\n### Using the Package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install from local source\ndevtools::install_local(\"path/to/corpthemes\")\n\n# Use in any project\nlibrary(corpthemes)\nggplot(mtcars, aes(wt, mpg)) +\n  geom_point() +\n  theme_corporate()\n\n# Or set globally\nset_corporate_theme()\n```\n:::\n\n\n\n\n## Method 2: Theme Configuration Files\n\n### Creating a Theme Configuration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: theme_config.R\n\ntheme_config <- list(\n  # Colors\n  colors = list(\n    primary = \"#1f77b4\",\n    secondary = \"#ff7f0e\",\n    background = \"white\",\n    grid = \"gray90\"\n  ),\n  \n  # Typography\n  typography = list(\n    base_size = 12,\n    base_family = \"sans\",\n    title_size = 16,\n    subtitle_size = 14\n  ),\n  \n  # Spacing\n  spacing = list(\n    plot_margin = 20,\n    title_margin = 10,\n    legend_spacing = 5\n  )\n)\n\n# Function to create theme from config\ncreate_theme_from_config <- function(config) {\n  theme_minimal(\n    base_size = config$typography$base_size,\n    base_family = config$typography$base_family\n  ) %+replace%\n  theme(\n    # Text elements\n    plot.title = element_text(\n      size = config$typography$title_size,\n      face = \"bold\",\n      margin = margin(b = config$spacing$title_margin)\n    ),\n    plot.subtitle = element_text(\n      size = config$typography$subtitle_size,\n      margin = margin(b = config$spacing$title_margin)\n    ),\n    # Colors\n    plot.background = element_rect(\n      fill = config$colors$background,\n      color = NA\n    ),\n    panel.grid = element_line(\n      color = config$colors$grid\n    ),\n    # Spacing\n    plot.margin = margin(\n      rep(config$spacing$plot_margin, 4)\n    )\n  )\n}\n\n# Save configuration\nsaveRDS(theme_config, \"theme_config.rds\")\n```\n:::\n\n\n\n\n### Using Configuration Files\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In any project\ntheme_config <- readRDS(\"theme_config.rds\")\ntheme_custom <- create_theme_from_config(theme_config)\n\n# Apply theme\nggplot(mtcars, aes(wt, mpg)) +\n  geom_point() +\n  theme_custom\n```\n:::\n\n\n\n\n## Method 3: Project-level Theme Script\n\n### Creating a Theme Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: R/themes.R\n\n# Base theme function\ncreate_base_theme <- function(\n    base_size = 12,\n    base_family = \"sans\"\n) {\n  theme_minimal(\n    base_size = base_size,\n    base_family = base_family\n  ) %+replace%\n  theme(\n    plot.title = element_text(\n      size = rel(1.3),\n      face = \"bold\"\n    )\n  )\n}\n\n# Theme modifications for specific plot types\nadd_presentation_mods <- function(base_theme) {\n  base_theme +\n    theme(\n      text = element_text(size = rel(1.2)),\n      plot.margin = margin(20, 20, 20, 20)\n    )\n}\n\nadd_publication_mods <- function(base_theme) {\n  base_theme +\n    theme(\n      text = element_text(size = rel(0.9)),\n      plot.margin = margin(10, 10, 10, 10)\n    )\n}\n\n# Color palettes\nproject_colors <- list(\n  main = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"),\n  diverging = c(\"#d73027\", \"#fee090\", \"#4575b4\"),\n  sequential = c(\"#fee5d9\", \"#fcae91\", \"#fb6a4a\")\n)\n\n# Save objects\nsave(\n  create_base_theme,\n  add_presentation_mods,\n  add_publication_mods,\n  project_colors,\n  file = \"theme_objects.RData\"\n)\n```\n:::\n\n\n\n\n### Using Theme Scripts\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load theme objects\nload(\"R/theme_objects.RData\")\n\n# Create base theme\nbase_theme <- create_base_theme()\n\n# Create presentation version\npresentation_plot <- ggplot(mtcars, aes(wt, mpg)) +\n  geom_point() +\n  base_theme %>%\n  add_presentation_mods()\n\n# Create publication version\npublication_plot <- ggplot(mtcars, aes(wt, mpg)) +\n  geom_point() +\n  base_theme %>%\n  add_publication_mods()\n```\n:::\n\n\n\n\n## Method 4: Environment Variables and Project Settings\n\n### Setting Up Project Configuration\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: .Renviron\nTHEME_BASE_SIZE=12\nTHEME_FAMILY=\"sans\"\nTHEME_COLOR_PRIMARY=\"#1f77b4\"\n\n# File: .Rprofile\n.First <- function() {\n  # Load theme settings\n  theme_settings <- list(\n    base_size = as.numeric(Sys.getenv(\"THEME_BASE_SIZE\")),\n    base_family = Sys.getenv(\"THEME_FAMILY\"),\n    primary_color = Sys.getenv(\"THEME_COLOR_PRIMARY\")\n  )\n  \n  # Create and set theme\n  custom_theme <- theme_minimal(\n    base_size = theme_settings$base_size,\n    base_family = theme_settings$base_family\n  ) %+replace%\n  theme(\n    plot.title = element_text(\n      color = theme_settings$primary_color,\n      face = \"bold\"\n    )\n  )\n  \n  # Set theme globally\n  ggplot2::theme_set(custom_theme)\n}\n```\n:::\n\n\n\n\n## Best Practices\n\n1. **Version Control**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Include version in theme objects\ntheme_version <- \"1.0.0\"\n\n# Add version checking\ncheck_theme_version <- function(required_version) {\n  if (package_version(theme_version) < package_version(required_version)) {\n    warning(\"Theme version mismatch. Please update your theme files.\")\n  }\n}\n```\n:::\n\n\n\n\n2. **Documentation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create theme documentation\ntheme_docs <- list(\n  version = \"1.0.0\",\n  author = \"Your Name\",\n  last_updated = Sys.Date(),\n  dependencies = c(\"ggplot2\", \"grid\"),\n  usage_examples = \"See README.md\",\n  color_palette = data.frame(\n    name = c(\"primary\", \"secondary\"),\n    hex = c(\"#1f77b4\", \"#ff7f0e\"),\n    usage = c(\"Main elements\", \"Highlights\")\n  )\n)\n\n# Save documentation\nsaveRDS(theme_docs, \"theme_documentation.rds\")\n```\n:::\n\n\n\n\n3. **Testing**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to test theme appearance\ntest_theme <- function(theme) {\n  # Create test plots\n  p1 <- ggplot(mtcars, aes(wt, mpg)) +\n    geom_point() +\n    theme +\n    labs(title = \"Test Plot 1\")\n  \n  p2 <- ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +\n    geom_point() +\n    theme +\n    labs(title = \"Test Plot 2\")\n  \n  # Return both plots\n  list(p1, p2)\n}\n\n# Test with different sizes\ntest_sizes <- function(theme_func) {\n  Map(\n    function(size) theme_func(base_size = size),\n    c(8, 12, 16)\n  )\n}\n```\n:::\n\n\n\n\n## Tips for Theme Management\n\n1. **Organization**\n   - Keep themes in a dedicated directory\n   - Use clear naming conventions\n   - Separate theme logic from plot code\n\n2. **Portability**\n   - Use relative paths with `here()`\n   - Document dependencies\n   - Include example usage\n\n3. **Maintenance**\n   - Regular testing\n   - Version control\n   - Change documentation\n   - Backup strategy\n\n4. **Distribution**\n   - Package format for sharing\n   - Configuration files for customization\n   - Clear installation instructions",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}