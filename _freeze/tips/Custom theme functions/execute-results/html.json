{
  "hash": "f49203d242bf7a7850f9bd86f3fa4627",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Custom Theme Functions in ggplot2\"\nformat: html\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n## Introduction\n\nCreating custom theme functions allows for consistent, maintainable, and flexible plot styling. This guide focuses on building robust theme functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# Create a base plot for examples\nbase_plot <- penguins %>%\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n```\n:::\n\n\n\n\n## Basic Theme Function Structure\n\n### Simple Theme Function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_simple <- function(base_size = 12, base_family = \"sans\") {\n  # Always start with a complete theme base\n  theme_minimal(\n    base_size = base_size,\n    base_family = base_family\n  ) %+replace%    # Use %+replace% instead of + for proper inheritance\n    theme(\n      # Text elements\n      plot.title = element_text(\n        size = rel(1.3),      # Relative sizing\n        face = \"bold\",\n        margin = margin(b = 15)\n      ),\n      # Grid elements\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_line(color = \"gray90\")\n    )\n}\n\n# Usage\nbase_plot +\n  labs(title = \"Simple Theme Example\") +\n  theme_simple()\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/basic-theme-1.png){width=672}\n:::\n:::\n\n\n\n\n### Parameterized Theme Function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_flexible <- function(\n    base_size = 12,\n    base_family = \"sans\",\n    title_size = rel(1.3),\n    title_color = \"black\",\n    grid_color = \"gray90\",\n    show_minor_grid = FALSE\n) {\n  # Input validation\n  stopifnot(\n    is.numeric(base_size),\n    is.character(base_family),\n    is.numeric(title_size) || inherits(title_size, \"rel\"),\n    is.character(title_color),\n    is.character(grid_color),\n    is.logical(show_minor_grid)\n  )\n  \n  # Create theme\n  theme_minimal(\n    base_size = base_size,\n    base_family = base_family\n  ) %+replace%\n    theme(\n      plot.title = element_text(\n        size = title_size,\n        color = title_color,\n        face = \"bold\",\n        margin = margin(b = 15)\n      ),\n      panel.grid.major = element_line(color = grid_color),\n      panel.grid.minor = if (show_minor_grid) {\n        element_line(color = grid_color, linewidth = 0.25)\n      } else {\n        element_blank()\n      }\n    )\n}\n\n# Usage examples\nbase_plot +\n  labs(title = \"Default Parameters\") +\n  theme_flexible()\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/parameterized-theme-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbase_plot +\n  labs(title = \"Custom Parameters\") +\n  theme_flexible(\n    base_size = 14,\n    title_color = \"navy\",\n    grid_color = \"gray80\",\n    show_minor_grid = TRUE\n  )\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/parameterized-theme-2.png){width=672}\n:::\n:::\n\n\n\n\n## Advanced Theme Functions\n\n### Theme with Built-in Error Handling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_robust <- function(\n    base_size = 12,\n    style = c(\"light\", \"dark\"),\n    accent_color = \"#1f77b4\"\n) {\n  # Match and validate style argument\n  style <- match.arg(style)\n  \n  # Validate color input\n  is_valid_color <- function(x) {\n    tryCatch({\n      is.character(x) && \n        (grepl(\"^#[0-9A-Fa-f]{6}$\", x) || x %in% colors())\n    }, error = function(e) FALSE)\n  }\n  \n  if (!is_valid_color(accent_color)) {\n    stop(\"Invalid accent color. Use hex code or R color name.\")\n  }\n  \n  # Define style-specific parameters\n  if (style == \"light\") {\n    bg_color <- \"white\"\n    text_color <- \"black\"\n    grid_color <- \"gray90\"\n  } else {\n    bg_color <- \"gray10\"\n    text_color <- \"white\"\n    grid_color <- \"gray30\"\n  }\n  \n  # Create theme with error handling\n  tryCatch({\n    theme_minimal(\n      base_size = base_size\n    ) %+replace%\n    theme(\n      # Text elements\n      text = element_text(color = text_color),\n      plot.title = element_text(\n        color = accent_color,\n        size = rel(1.3),\n        face = \"bold\"\n      ),\n      # Panel elements\n      panel.background = element_rect(fill = bg_color, color = NA),\n      panel.grid = element_line(color = grid_color),\n      # Axis elements\n      axis.text = element_text(color = text_color),\n      axis.title = element_text(color = accent_color)\n    )\n  }, error = function(e) {\n    warning(\"Theme creation failed. Falling back to theme_minimal().\")\n    theme_minimal(base_size = base_size)\n  })\n}\n\n# Usage\nbase_plot +\n  labs(title = \"Light Theme\") +\n  theme_robust(style = \"light\", accent_color = \"navy\")\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/robust-theme-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbase_plot +\n  labs(title = \"Dark Theme\") +\n  theme_robust(style = \"dark\", accent_color = \"#ff7f0e\")\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/robust-theme-2.png){width=672}\n:::\n:::\n\n\n\n\n### Theme with Configuration Object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define configuration object\ncreate_theme_config <- function(\n    base_size = 12,\n    colors = list(\n      primary = \"#1f77b4\",\n      secondary = \"#ff7f0e\",\n      text = \"black\",\n      grid = \"gray90\"\n    ),\n    fonts = list(\n      base = \"sans\",\n      title = \"sans\",\n      axis = \"sans\"\n    ),\n    spacing = list(\n      title_margin = 15,\n      axis_margin = 10,\n      plot_margin = 20\n    )\n) {\n  # Validate configuration\n  stopifnot(\n    is.numeric(base_size),\n    is.list(colors),\n    is.list(fonts),\n    is.list(spacing)\n  )\n  \n  # Return validated config\n  list(\n    base_size = base_size,\n    colors = colors,\n    fonts = fonts,\n    spacing = spacing\n  )\n}\n\ntheme_from_config <- function(config) {\n  # Validate config object\n  if (!all(c(\"base_size\", \"colors\", \"fonts\", \"spacing\") %in% names(config))) {\n    stop(\"Invalid config object\")\n  }\n  \n  theme_minimal(\n    base_size = config$base_size,\n    base_family = config$fonts$base\n  ) %+replace%\n    theme(\n      # Text elements\n      plot.title = element_text(\n        family = config$fonts$title,\n        color = config$colors$primary,\n        size = rel(1.3),\n        margin = margin(b = config$spacing$title_margin)\n      ),\n      axis.title = element_text(\n        family = config$fonts$axis,\n        color = config$colors$secondary,\n        margin = margin(t = config$spacing$axis_margin)\n      ),\n      # Grid elements\n      panel.grid = element_line(color = config$colors$grid),\n      # Margins\n      plot.margin = margin(\n        t = config$spacing$plot_margin,\n        r = config$spacing$plot_margin,\n        b = config$spacing$plot_margin,\n        l = config$spacing$plot_margin\n      )\n    )\n}\n\n# Usage\nmy_config <- create_theme_config(\n  base_size = 14,\n  colors = list(\n    primary = \"navy\",\n    secondary = \"darkred\",\n    text = \"black\",\n    grid = \"gray85\"\n  )\n)\n\nbase_plot +\n  labs(title = \"Theme from Configuration\") +\n  theme_from_config(my_config)\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/config-theme-1.png){width=672}\n:::\n:::\n\n\n\n\n### Theme with Extension Methods\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a theme function with modifiable components\ncreate_extensible_theme <- function() {\n  # Base theme creation\n  base <- theme_minimal()\n  \n  # List of modification functions\n  modifications <- list()\n  \n  # Function to add modifications\n  add_modification <- function(name, func) {\n    modifications[[name]] <- func\n    return(environment())\n  }\n  \n  # Function to build final theme\n  build <- function() {\n    result <- base\n    for (mod in modifications) {\n      result <- result + mod()\n    }\n    return(result)\n  }\n  \n  # Return environment with methods\n  environment()\n}\n\n# Usage\nmy_theme <- create_extensible_theme()\nmy_theme$add_modification(\"titles\", function() {\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14)\n  )\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<environment: 0x0000021c7b073560>\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_theme$add_modification(\"grid\", function() {\n  theme(\n    panel.grid.minor = element_blank()\n  )\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<environment: 0x0000021c7b0bd380>\n```\n\n\n:::\n\n```{.r .cell-code}\nbase_plot +\n  labs(title = \"Extensible Theme Example\") +\n  my_theme$build()\n```\n\n::: {.cell-output-display}\n![](Custom-theme-functions_files/figure-html/extensible-theme-1.png){width=672}\n:::\n:::\n\n\n\n\n## Best Practices\n\n1. **Input Validation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalidate_theme_inputs <- function(\n    base_size,\n    font_family,\n    colors\n) {\n  # Check numeric inputs\n  if (!is.numeric(base_size) || base_size <= 0) {\n    stop(\"base_size must be a positive number\")\n  }\n  \n  # Check font family\n  if (!is.character(font_family) || length(font_family) != 1) {\n    stop(\"font_family must be a single character string\")\n  }\n  \n  # Check colors\n  sapply(colors, function(color) {\n    if (!is_valid_color(color)) {\n      stop(sprintf(\"Invalid color: %s\", color))\n    }\n  })\n  \n  # Return validated inputs\n  list(\n    base_size = base_size,\n    font_family = font_family,\n    colors = colors\n  )\n}\n```\n:::\n\n\n\n\n2. **Documentation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Create a custom theme for corporate plots\n#'\n#' @param base_size Base font size\n#' @param style Either \"light\" or \"dark\"\n#' @param accent_color Primary color for emphasis\n#'\n#' @return A ggplot2 theme object\n#' @examples\n#' ggplot(data) + theme_corporate()\n#' ggplot(data) + theme_corporate(style = \"dark\")\ntheme_corporate <- function(\n    base_size = 12,\n    style = c(\"light\", \"dark\"),\n    accent_color = \"#1f77b4\"\n) {\n  # Function body as before\n}\n```\n:::\n\n\n\n\n3. **Version Control**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_versioned <- function(version = \"1.0\") {\n  if (version == \"1.0\") {\n    theme_minimal()\n  } else if (version == \"2.0\") {\n    theme_minimal() + \n      theme(text = element_text(size = 12))\n  } else {\n    warning(\"Unknown version, using latest\")\n    theme_minimal()\n  }\n}\n```\n:::\n\n\n\n\n## Tips for Theme Function Development\n\n1. Always start with a complete base theme\n2. Use `%+replace%` for proper theme inheritance\n3. Implement robust error handling\n4. Document all parameters and their effects\n5. Consider creating theme modifiers for specific purposes\n6. Test themes with different plot types and scales\n7. Use relative sizing with `rel()` for better scaling\n8. Include sensible defaults for all parameters\n\n## Common Pitfalls to Avoid\n\n1. Not handling missing fonts\n2. Forgetting to validate color inputs\n3. Using absolute sizes instead of relative ones\n4. Not considering different output formats\n5. Overriding too many theme elements\n6. Not providing adequate documentation\n7. Making themes too specific to one use case\n8. Not considering accessibility",
    "supporting": [
      "Custom-theme-functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}