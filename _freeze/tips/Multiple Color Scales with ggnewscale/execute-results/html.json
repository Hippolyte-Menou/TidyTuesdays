{
  "hash": "441a74e2db77770dad9ca36f6e08efae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple Color Scales with ggnewscale\"\nformat: html\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n## Introduction\n\nThe ggnewscale package allows you to use multiple color and fill scales in a single ggplot2 visualization. This guide explores various techniques and applications.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hexbin)\nlibrary(tidyverse)\nlibrary(ggnewscale)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n## Basic Usage\n\n### Different Color Scales for Points and Lines\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create example data\nset.seed(123)\npoint_data <- tibble(\n  x = rnorm(100),\n  y = rnorm(100),\n  group = sample(letters[1:3], 100, replace = TRUE)\n)\n\n# Add trend lines\ntrend_data <- tibble(\n  x = seq(-3, 3, length.out = 100),\n  y = x * 0.5,\n  confidence = abs(x)\n)\n\n# Plot with two color scales\nggplot() +\n  # First color scale for points\n  geom_point(data = point_data,\n             aes(x = x, y = y, color = group)) +\n  scale_color_viridis_d(name = \"Groups\") +\n  \n  # New color scale for line\n  new_scale_color() +\n  geom_line(data = trend_data,\n            aes(x = x, y = y, color = confidence),\n            linewidth = 1) +\n  scale_color_gradient(\n    name = \"Confidence\",\n    low = \"blue\", high = \"red\"\n  ) +\n  labs(title = \"Multiple Color Scales Example\",\n       subtitle = \"Points and line use different scales\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/basic-usage-1.png){width=672}\n:::\n:::\n\n\n\n## Working with Fill Scales\n\n### Multiple Fill Scales in Bar Plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data for stacked bars\npenguin_summary <- penguins %>%\n  group_by(species, sex) %>%\n  summarise(\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create plot with different fill scales\nggplot() +\n  # First set of bars\n  geom_col(data = penguin_summary,\n           aes(x = species, y = mean_mass, fill = sex),\n           position = \"dodge\") +\n  scale_fill_brewer(name = \"Sex\", palette = \"Set1\") +\n  \n  # New fill scale for second layer\n  new_scale_fill() +\n  geom_point(data = penguin_summary,\n             aes(x = species, y = mean_flipper * 20, \n                 fill = mean_flipper),\n             size = 5, shape = 21) +\n  scale_fill_viridis_c(name = \"Flipper Length\") +\n  \n  # Add second axis for flipper length\n  scale_y_continuous(\n    name = \"Body Mass (g)\",\n    sec.axis = sec_axis(~./20, name = \"Flipper Length (mm)\")\n  ) +\n  labs(title = \"Penguin Measurements\",\n       subtitle = \"Using different fill scales for bars and points\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/fill-scales-1.png){width=672}\n:::\n:::\n\n\n\n## Advanced Applications\n\n### Combining Multiple Aesthetics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create complex visualization with multiple scales\nggplot() +\n  # Base layer with first color scale\n  geom_point(data = penguins,\n             aes(x = bill_length_mm, y = bill_depth_mm,\n                 color = species),\n             size = 3) +\n  scale_color_brewer(name = \"Species\", palette = \"Set1\") +\n  \n  # New color scale for density contours\n  new_scale_color() +\n  stat_density_2d(data = penguins,\n                  aes(x = bill_length_mm, y = bill_depth_mm,\n                      color = after_stat(level)),\n                  linewidth = 0.5) +\n  scale_color_viridis_c(name = \"Density\") #+\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/multiple-aesthetics-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # New fill scale for background tiles\n  # new_scale_fill() +\n  # stat_density_2d(data = penguins,\n  #                 aes(x = bill_length_mm, y = bill_depth_mm,\n  #                     fill = after_stat(level)),\n  #                 geom = \"raster\",\n  #                 alpha = 0.2) +\n  # scale_fill_gradient(name = \"Background\\nDensity\",\n  #                    low = \"white\", high = \"navy\") +\n  # labs(title = \"Multiple Aesthetic Scales\",\n  #      subtitle = \"Points, contours, and tiles each use different scales\")\n```\n:::\n\n\n\n### Temporal Data with Multiple Scales\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create example time series data\nset.seed(123)\ntime_data <- tibble(\n  date = seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"), by = \"day\"),\n  value = cumsum(rnorm(365)),\n  anomaly = rnorm(365),\n  event = sample(c(\"A\", \"B\", \"C\"), 365, replace = TRUE, prob = c(0.8, 0.15, 0.05))\n)\n\n# Create multi-scale time series plot\nggplot() +\n  # Background tiles for anomalies\n  geom_tile(data = time_data,\n            aes(x = date, y = 1, fill = anomaly),\n            height = 2) +\n  scale_fill_gradient2(name = \"Anomaly\",\n                      low = \"blue\", mid = \"white\", high = \"red\") +\n  \n  # New color scale for line\n  new_scale_color() +\n  geom_line(data = time_data,\n            aes(x = date, y = value, color = abs(value)),\n            linewidth = 1) +\n  scale_color_viridis_c(name = \"Value\\nMagnitude\") +\n  \n  # New fill scale for events\n  new_scale_fill() +\n  geom_point(data = subset(time_data, event != \"A\"),\n             aes(x = date, y = value, fill = event),\n             shape = 21, size = 3) +\n  scale_fill_manual(name = \"Event Type\",\n                   values = c(\"B\" = \"yellow\", \"C\" = \"orange\")) +\n  labs(title = \"Time Series with Multiple Scales\",\n       subtitle = \"Background, line, and events use different scales\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/temporal-data-1.png){width=672}\n:::\n:::\n\n\n\n## Common Pitfalls and Solutions\n\n### 1. Scale Order Issues\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Problem: Incorrect scale order\nbad_order <- ggplot() +\n  geom_point(data = point_data,\n             aes(x = x, y = y, color = group)) +\n  new_scale_color() +  # New scale before first scale definition\n  scale_color_viridis_d()\n\n# Solution: Correct order\ngood_order <- ggplot() +\n  geom_point(data = point_data,\n             aes(x = x, y = y, color = group)) +\n  scale_color_viridis_d() +\n  new_scale_color() +\n  geom_line(data = trend_data,\n            aes(x = x, y = y, color = confidence))\n\n# Compare\nbad_order + labs(title = \"Incorrect Scale Order\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/scale-order-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngood_order + labs(title = \"Correct Scale Order\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/scale-order-2.png){width=672}\n:::\n:::\n\n\n\n### 2. Legend Placement\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Problem: Overlapping legends\nmessy_legends <- ggplot() +\n  geom_point(data = point_data,\n             aes(x = x, y = y, color = group)) +\n  scale_color_viridis_d(name = \"Groups\") +\n  new_scale_color() +\n  geom_line(data = trend_data,\n            aes(x = x, y = y, color = confidence))\n\n# Solution: Organized legends\nclean_legends <- ggplot() +\n  geom_point(data = point_data,\n             aes(x = x, y = y, color = group)) +\n  scale_color_viridis_d(name = \"Groups\") +\n  new_scale_color() +\n  geom_line(data = trend_data,\n            aes(x = x, y = y, color = confidence)) +\n  theme(\n    legend.position = \"right\",\n    legend.box = \"vertical\",\n    legend.margin = margin(5, 5, 5, 5)\n  )\n\n# Compare\nmessy_legends + labs(title = \"Messy Legend Placement\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/legend-placement-1.png){width=672}\n:::\n\n```{.r .cell-code}\nclean_legends + labs(title = \"Clean Legend Placement\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/legend-placement-2.png){width=672}\n:::\n:::\n\n\n\n## Best Practices\n\n### 1. Clear Visual Hierarchy\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create clear visual hierarchy\nggplot() +\n  # Background layer\n  geom_hex(data = penguins,\n           aes(x = bill_length_mm, y = bill_depth_mm,\n               fill = after_stat(count)),\n           alpha = 0.3) +\n  scale_fill_viridis_c(name = \"Count\") +\n  \n  # New color scale for points\n  new_scale_color() +\n  geom_point(data = penguins,\n             aes(x = bill_length_mm, y = bill_depth_mm,\n                 color = species),\n             size = 3) +\n  scale_color_brewer(name = \"Species\", palette = \"Set1\") +\n  labs(title = \"Clear Visual Hierarchy\",\n       subtitle = \"Background hexbins with highlighted points\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/visual-hierarchy-1.png){width=672}\n:::\n:::\n\n\n\n### 2. Consistent Scale Types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use consistent scale types for related data\npenguin_summary <- penguins %>%\n  group_by(species) %>%\n  summarise(across(ends_with(\"mm\"), \n                  list(mean = mean, sd = sd),\n                  na.rm = TRUE))\n\nggplot() +\n  # First measure\n  geom_pointrange(data = penguin_summary,\n                 aes(x = species,\n                     y = bill_length_mm_mean,\n                     ymin = bill_length_mm_mean - bill_length_mm_sd,\n                     ymax = bill_length_mm_mean + bill_length_mm_sd,\n                     color = species)) +\n  scale_color_brewer(name = \"Species (Length)\", palette = \"Set1\") +\n  \n  # New scale for second measure\n  new_scale_color() +\n  geom_pointrange(data = penguin_summary,\n                 aes(x = species,\n                     y = flipper_length_mm_mean / 3,\n                     ymin = flipper_length_mm_mean/3 - flipper_length_mm_sd/3,\n                     ymax = flipper_length_mm_mean/3 + flipper_length_mm_sd/3,\n                     color = species)) +\n  scale_color_brewer(name = \"Species (Flipper)\", palette = \"Set2\") +\n  scale_y_continuous(\n    name = \"Bill Length (mm)\",\n    sec.axis = sec_axis(~.*3, name = \"Flipper Length (mm)\")\n  ) +\n  labs(title = \"Consistent Scale Types\",\n       subtitle = \"Similar data uses similar scale types\")\n```\n\n::: {.cell-output-display}\n![](Multiple-Color-Scales-with-ggnewscale_files/figure-html/consistent-scales-1.png){width=672}\n:::\n:::\n\n\n\n## Tips for Complex Visualizations\n\n1. **Plan Your Layers**\n   - Organize layers from background to foreground\n   - Consider which aesthetics need different scales\n   - Think about visual hierarchy\n\n2. **Legend Management**\n   - Use clear legend titles\n   - Organize legend position and layout\n   - Consider removing redundant legends\n\n3. **Scale Selection**\n   - Choose appropriate scale types\n   - Use consistent color schemes\n   - Consider colorblind-friendly palettes\n\n4. **Performance**\n   - Limit number of scales for clarity\n   - Consider computational efficiency\n   - Test with different data sizes",
    "supporting": [
      "Multiple-Color-Scales-with-ggnewscale_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}