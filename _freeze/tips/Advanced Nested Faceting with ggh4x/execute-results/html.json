{
  "hash": "b371d47981515b5e63e435f2e4aec595",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced Nested Faceting with ggh4x\"\nformat: html\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n## Introduction\n\nggh4x provides powerful nested faceting capabilities that go beyond standard ggplot2 faceting. This guide explores these advanced features.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggh4x)\nlibrary(palmerpenguins)\n\n# Prepare additional data for examples\ndiamonds_subset <- diamonds %>%\n  filter(cut %in% c(\"Ideal\", \"Premium\", \"Very Good\")) %>%\n  sample_n(1000)\n```\n:::\n\n\n\n\n## Basic Nested Faceting\n\n### Simple Nesting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic nested structure\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(~ species + island) +\n  labs(title = \"Basic Nested Faceting\",\n       subtitle = \"Species nested with Islands\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/basic-nesting-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# With explicit nesting operator\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(~ species + island, nest_line = TRUE) +\n  labs(title = \"Nested Faceting with Divider Lines\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/basic-nesting-2.png){width=672}\n:::\n:::\n\n\n\n\n## Advanced Nesting Features\n\n### Nested Grid Layouts\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Two-way nested grid\nggplot(diamonds_subset, \n       aes(carat, price, color = clarity)) +\n  geom_point(alpha = 0.6) +\n  facet_nested(cut ~ color + clarity) +\n  labs(title = \"Two-way Nested Grid\",\n       subtitle = \"Cut by Color and Clarity\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/nested-grid-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Complex nesting with varying scales\nggplot(diamonds_subset, \n       aes(carat, price, color = clarity)) +\n  geom_point(alpha = 0.6) +\n  facet_nested(\n    cut ~ color + clarity,\n    scales = \"free_y\",\n    nest_line = TRUE,\n    strip = strip_nested(\n      background_y = list(\n        element_rect(fill = \"lightblue\"),\n        element_rect(fill = \"lightgreen\")\n      )\n    )\n  ) +\n  labs(title = \"Nested Grid with Custom Styling\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/nested-grid-2.png){width=672}\n:::\n:::\n\n\n\n\n### Independent Scale Control\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Different scales for different nesting levels\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(\n    species + island ~ sex,\n    independent = \"all\",\n    scales = \"free\"\n  ) +\n  labs(title = \"Independent Scales at Each Level\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/scale-control-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Partial scale independence\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(\n    species + island ~ .,\n    scales = \"free_y\",\n    independent = \"y\"\n  ) +\n  labs(title = \"Partial Scale Independence\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/scale-control-2.png){width=672}\n:::\n:::\n\n\n\n\n## Custom Strip Appearances\n\n### Hierarchical Strip Styling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Different styles for different levels\nggplot(diamonds_subset, aes(carat, price)) +\n  geom_point(alpha = 0.5) +\n  facet_nested(\n    ~ cut + clarity,\n    strip = strip_nested(\n      background_x = list(\n        element_rect(fill = \"lightblue\"),\n        element_rect(fill = \"lightpink\")\n      ),\n      text_x = list(\n        element_text(face = \"bold\", size = 12),\n        element_text(face = \"italic\", size = 10)\n      )\n    )\n  ) +\n  labs(title = \"Hierarchical Strip Styling\")\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/strip-styling-1.png){width=672}\n:::\n:::\n\n\n\n\n### Nested Strip Placement\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Control strip positions\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(\n    ~ species + island,\n    switch = \"x\",\n    strip = strip_nested(\n      placement = \"outside\",\n      clip = \"off\"\n    )\n  ) +\n  labs(title = \"Custom Strip Placement\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(placement = \"outside\", clip = \"off\"): argument inutilisé (placement = \"outside\")\n```\n\n\n:::\n:::\n\n\n\n\n## Complex Nesting Patterns\n\n### Multi-level Nesting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create more complex grouping structure\ndiamonds_nested <- diamonds_subset %>%\n  mutate(\n    price_category = case_when(\n      price < 5000 ~ \"Low\",\n      price < 10000 ~ \"Medium\",\n      TRUE ~ \"High\"\n    ),\n    size_category = case_when(\n      carat < 0.5 ~ \"Small\",\n      carat < 1 ~ \"Medium\",\n      TRUE ~ \"Large\"\n    )\n  )\n\n# Multi-level nested plot\nggplot(diamonds_nested, \n       aes(carat, price, color = clarity)) +\n  geom_point(alpha = 0.6) +\n  facet_nested(\n    cut + price_category ~ color + size_category,\n    nest_line = TRUE,\n    strip = strip_nested(\n      background = list(\n        element_rect(fill = \"lightblue\"),\n        element_rect(fill = \"lightpink\"),\n        element_rect(fill = \"lightgreen\"),\n        element_rect(fill = \"lightyellow\")\n      )\n    )\n  ) +\n  labs(title = \"Multi-level Nested Faceting\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(background = list(element_rect(fill = \"lightblue\"), : l'argument 1 correspond à plusieurs arguments formels\n```\n\n\n:::\n:::\n\n\n\n\n### Nested Margins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Control margins between nested levels\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_nested(\n    ~ species + island,\n    margins = \"island\",\n    strip = strip_nested(\n      background = list(\n        element_rect(fill = \"gray95\"),\n        element_rect(fill = \"gray85\")\n      )\n    )\n  ) +\n  labs(title = \"Nested Facets with Margins\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(background = list(element_rect(fill = \"gray95\"), : l'argument 1 correspond à plusieurs arguments formels\n```\n\n\n:::\n:::\n\n\n\n\n## Best Practices\n\n### 1. Handling Complex Hierarchies\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create nested facets with proper ordering\ncreate_nested_facets <- function(data, vars, strip_colors) {\n  ggplot(data, aes(bill_length_mm, bill_depth_mm)) +\n    geom_point() +\n    facet_nested(\n      vars,\n      strip = strip_nested(\n        background = lapply(strip_colors, function(x) \n          element_rect(fill = x))\n      )\n    )\n}\n\n# Example usage\nnested_colors <- c(\"lightblue\", \"lightpink\", \"lightgreen\")\ncreate_nested_facets(\n  penguins, \n  ~ species + island + sex,\n  nested_colors\n) +\n  labs(title = \"Properly Ordered Nested Facets\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(background = lapply(strip_colors, function(x) element_rect(fill = x))): l'argument 1 correspond à plusieurs arguments formels\n```\n\n\n:::\n:::\n\n\n\n\n### 2. Scale Management\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to determine appropriate scale independence\nnested_with_scales <- function(data, threshold = 0.5) {\n  scale_independence <- if(var(data$bill_length_mm) / mean(data$bill_length_mm) > threshold) {\n    \"all\"\n  } else {\n    \"none\"\n  }\n  \n  ggplot(data, aes(bill_length_mm, bill_depth_mm)) +\n    geom_point() +\n    facet_nested(\n      ~ species + island,\n      scales = \"free\",\n      independent = scale_independence\n    )\n}\n\nnested_with_scales(penguins) +\n  labs(title = \"Adaptive Scale Independence\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in if (var(data$bill_length_mm)/mean(data$bill_length_mm) > threshold) {: valeur manquante là où TRUE / FALSE est requis\n```\n\n\n:::\n:::\n\n\n\n\n## Common Pitfalls and Solutions\n\n### 1. Overcomplicated Nesting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bad: Too many nesting levels\ntoo_complex <- ggplot(diamonds_nested, \n                     aes(carat, price)) +\n  geom_point() +\n  facet_nested(\n    cut + clarity + color + price_category ~ size_category\n  ) +\n  labs(title = \"Too Many Nesting Levels\")\n\n# Better: Simplified structure\nbetter_structure <- ggplot(diamonds_nested,\n                         aes(carat, price, color = clarity)) +\n  geom_point() +\n  facet_nested(\n    cut + price_category ~ size_category\n  ) +\n  labs(title = \"Simplified Nesting Structure\")\n\n# Compare\ntoo_complex\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/overcomplicated-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbetter_structure\n```\n\n::: {.cell-output-display}\n![](Advanced-Nested-Faceting-with-ggh4x_files/figure-html/overcomplicated-2.png){width=672}\n:::\n:::\n\n\n\n\n### 2. Inconsistent Visual Hierarchy\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bad: Confusing hierarchy\nbad_hierarchy <- ggplot(penguins,\n                       aes(bill_length_mm, bill_depth_mm)) +\n  geom_point() +\n  facet_nested(\n    ~ species + island,\n    strip = strip_nested(\n      background = list(\n        element_rect(fill = \"lightgray\"),\n        element_rect(fill = \"darkblue\")\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(background = list(element_rect(fill = \"lightgray\"), : l'argument 1 correspond à plusieurs arguments formels\n```\n\n\n:::\n\n```{.r .cell-code}\n# Better: Clear hierarchy\ngood_hierarchy <- ggplot(penguins,\n                        aes(bill_length_mm, bill_depth_mm)) +\n  geom_point() +\n  facet_nested(\n    ~ species + island,\n    strip = strip_nested(\n      background = list(\n        element_rect(fill = \"darkblue\"),\n        element_rect(fill = \"lightblue\")\n      ),\n      text = list(\n        element_text(size = 12, face = \"bold\", color = \"white\"),\n        element_text(size = 10)\n      )\n    )\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in strip_nested(background = list(element_rect(fill = \"darkblue\"), : l'argument 2 correspond à plusieurs arguments formels\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compare\nbad_hierarchy + labs(title = \"Confusing Hierarchy\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: objet 'bad_hierarchy' introuvable\n```\n\n\n:::\n\n```{.r .cell-code}\ngood_hierarchy + labs(title = \"Clear Hierarchy\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: objet 'good_hierarchy' introuvable\n```\n\n\n:::\n:::\n\n\n\n\n## Tips for Effective Nested Faceting\n\n1. **Plan Your Hierarchy**\n   - Organize variables by importance\n   - Limit nesting depth\n   - Consider visual clarity\n\n2. **Manage Visual Elements**\n   - Use consistent color schemes\n   - Maintain clear text hierarchy\n   - Control spacing effectively\n\n3. **Handle Scale Relationships**\n   - Choose appropriate scale independence\n   - Consider data distributions\n   - Maintain comparability where needed\n\n4. **Consider Performance**\n   - Limit total number of facets\n   - Use efficient data structures\n   - Test with large datasets",
    "supporting": [
      "Advanced-Nested-Faceting-with-ggh4x_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}