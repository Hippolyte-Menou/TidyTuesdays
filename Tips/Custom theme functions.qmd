---
title: "Creating Custom Theme Functions in ggplot2"
format: html
execute:
  warning: false
  message: false
---

## Introduction

Creating custom theme functions allows for consistent, maintainable, and flexible plot styling. This guide focuses on building robust theme functions.

```{r}
#| label: setup
library(tidyverse)
library(palmerpenguins)

# Create a base plot for examples
base_plot <- penguins %>%
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()
```

## Basic Theme Function Structure

### Simple Theme Function

```{r}
#| label: basic-theme
theme_simple <- function(base_size = 12, base_family = "sans") {
  # Always start with a complete theme base
  theme_minimal(
    base_size = base_size,
    base_family = base_family
  ) %+replace%    # Use %+replace% instead of + for proper inheritance
    theme(
      # Text elements
      plot.title = element_text(
        size = rel(1.3),      # Relative sizing
        face = "bold",
        margin = margin(b = 15)
      ),
      # Grid elements
      panel.grid.minor = element_blank(),
      panel.grid.major = element_line(color = "gray90")
    )
}

# Usage
base_plot +
  labs(title = "Simple Theme Example") +
  theme_simple()
```

### Parameterized Theme Function

```{r}
#| label: parameterized-theme
theme_flexible <- function(
    base_size = 12,
    base_family = "sans",
    title_size = rel(1.3),
    title_color = "black",
    grid_color = "gray90",
    show_minor_grid = FALSE
) {
  # Input validation
  stopifnot(
    is.numeric(base_size),
    is.character(base_family),
    is.numeric(title_size) || inherits(title_size, "rel"),
    is.character(title_color),
    is.character(grid_color),
    is.logical(show_minor_grid)
  )
  
  # Create theme
  theme_minimal(
    base_size = base_size,
    base_family = base_family
  ) %+replace%
    theme(
      plot.title = element_text(
        size = title_size,
        color = title_color,
        face = "bold",
        margin = margin(b = 15)
      ),
      panel.grid.major = element_line(color = grid_color),
      panel.grid.minor = if (show_minor_grid) {
        element_line(color = grid_color, linewidth = 0.25)
      } else {
        element_blank()
      }
    )
}

# Usage examples
base_plot +
  labs(title = "Default Parameters") +
  theme_flexible()

base_plot +
  labs(title = "Custom Parameters") +
  theme_flexible(
    base_size = 14,
    title_color = "navy",
    grid_color = "gray80",
    show_minor_grid = TRUE
  )
```

## Advanced Theme Functions

### Theme with Built-in Error Handling

```{r}
#| label: robust-theme
theme_robust <- function(
    base_size = 12,
    style = c("light", "dark"),
    accent_color = "#1f77b4"
) {
  # Match and validate style argument
  style <- match.arg(style)
  
  # Validate color input
  is_valid_color <- function(x) {
    tryCatch({
      is.character(x) && 
        (grepl("^#[0-9A-Fa-f]{6}$", x) || x %in% colors())
    }, error = function(e) FALSE)
  }
  
  if (!is_valid_color(accent_color)) {
    stop("Invalid accent color. Use hex code or R color name.")
  }
  
  # Define style-specific parameters
  if (style == "light") {
    bg_color <- "white"
    text_color <- "black"
    grid_color <- "gray90"
  } else {
    bg_color <- "gray10"
    text_color <- "white"
    grid_color <- "gray30"
  }
  
  # Create theme with error handling
  tryCatch({
    theme_minimal(
      base_size = base_size
    ) %+replace%
    theme(
      # Text elements
      text = element_text(color = text_color),
      plot.title = element_text(
        color = accent_color,
        size = rel(1.3),
        face = "bold"
      ),
      # Panel elements
      panel.background = element_rect(fill = bg_color, color = NA),
      panel.grid = element_line(color = grid_color),
      # Axis elements
      axis.text = element_text(color = text_color),
      axis.title = element_text(color = accent_color)
    )
  }, error = function(e) {
    warning("Theme creation failed. Falling back to theme_minimal().")
    theme_minimal(base_size = base_size)
  })
}

# Usage
base_plot +
  labs(title = "Light Theme") +
  theme_robust(style = "light", accent_color = "navy")

base_plot +
  labs(title = "Dark Theme") +
  theme_robust(style = "dark", accent_color = "#ff7f0e")
```

### Theme with Configuration Object

```{r}
#| label: config-theme
# Define configuration object
create_theme_config <- function(
    base_size = 12,
    colors = list(
      primary = "#1f77b4",
      secondary = "#ff7f0e",
      text = "black",
      grid = "gray90"
    ),
    fonts = list(
      base = "sans",
      title = "sans",
      axis = "sans"
    ),
    spacing = list(
      title_margin = 15,
      axis_margin = 10,
      plot_margin = 20
    )
) {
  # Validate configuration
  stopifnot(
    is.numeric(base_size),
    is.list(colors),
    is.list(fonts),
    is.list(spacing)
  )
  
  # Return validated config
  list(
    base_size = base_size,
    colors = colors,
    fonts = fonts,
    spacing = spacing
  )
}

theme_from_config <- function(config) {
  # Validate config object
  if (!all(c("base_size", "colors", "fonts", "spacing") %in% names(config))) {
    stop("Invalid config object")
  }
  
  theme_minimal(
    base_size = config$base_size,
    base_family = config$fonts$base
  ) %+replace%
    theme(
      # Text elements
      plot.title = element_text(
        family = config$fonts$title,
        color = config$colors$primary,
        size = rel(1.3),
        margin = margin(b = config$spacing$title_margin)
      ),
      axis.title = element_text(
        family = config$fonts$axis,
        color = config$colors$secondary,
        margin = margin(t = config$spacing$axis_margin)
      ),
      # Grid elements
      panel.grid = element_line(color = config$colors$grid),
      # Margins
      plot.margin = margin(
        t = config$spacing$plot_margin,
        r = config$spacing$plot_margin,
        b = config$spacing$plot_margin,
        l = config$spacing$plot_margin
      )
    )
}

# Usage
my_config <- create_theme_config(
  base_size = 14,
  colors = list(
    primary = "navy",
    secondary = "darkred",
    text = "black",
    grid = "gray85"
  )
)

base_plot +
  labs(title = "Theme from Configuration") +
  theme_from_config(my_config)
```

### Theme with Extension Methods

```{r}
#| label: extensible-theme
# Create a theme function with modifiable components
create_extensible_theme <- function() {
  # Base theme creation
  base <- theme_minimal()
  
  # List of modification functions
  modifications <- list()
  
  # Function to add modifications
  add_modification <- function(name, func) {
    modifications[[name]] <- func
    return(environment())
  }
  
  # Function to build final theme
  build <- function() {
    result <- base
    for (mod in modifications) {
      result <- result + mod()
    }
    return(result)
  }
  
  # Return environment with methods
  environment()
}

# Usage
my_theme <- create_extensible_theme()
my_theme$add_modification("titles", function() {
  theme(
    plot.title = element_text(face = "bold", size = 14)
  )
})
my_theme$add_modification("grid", function() {
  theme(
    panel.grid.minor = element_blank()
  )
})

base_plot +
  labs(title = "Extensible Theme Example") +
  my_theme$build()
```

## Best Practices

1. **Input Validation**
```{r}
#| label: input-validation
validate_theme_inputs <- function(
    base_size,
    font_family,
    colors
) {
  # Check numeric inputs
  if (!is.numeric(base_size) || base_size <= 0) {
    stop("base_size must be a positive number")
  }
  
  # Check font family
  if (!is.character(font_family) || length(font_family) != 1) {
    stop("font_family must be a single character string")
  }
  
  # Check colors
  sapply(colors, function(color) {
    if (!is_valid_color(color)) {
      stop(sprintf("Invalid color: %s", color))
    }
  })
  
  # Return validated inputs
  list(
    base_size = base_size,
    font_family = font_family,
    colors = colors
  )
}
```

2. **Documentation**
```{r}
#| label: documentation
#' Create a custom theme for corporate plots
#'
#' @param base_size Base font size
#' @param style Either "light" or "dark"
#' @param accent_color Primary color for emphasis
#'
#' @return A ggplot2 theme object
#' @examples
#' ggplot(data) + theme_corporate()
#' ggplot(data) + theme_corporate(style = "dark")
theme_corporate <- function(
    base_size = 12,
    style = c("light", "dark"),
    accent_color = "#1f77b4"
) {
  # Function body as before
}
```

3. **Version Control**
```{r}
#| label: version-control
theme_versioned <- function(version = "1.0") {
  if (version == "1.0") {
    theme_minimal()
  } else if (version == "2.0") {
    theme_minimal() + 
      theme(text = element_text(size = 12))
  } else {
    warning("Unknown version, using latest")
    theme_minimal()
  }
}
```

## Tips for Theme Function Development

1. Always start with a complete base theme
2. Use `%+replace%` for proper theme inheritance
3. Implement robust error handling
4. Document all parameters and their effects
5. Consider creating theme modifiers for specific purposes
6. Test themes with different plot types and scales
7. Use relative sizing with `rel()` for better scaling
8. Include sensible defaults for all parameters

## Common Pitfalls to Avoid

1. Not handling missing fonts
2. Forgetting to validate color inputs
3. Using absolute sizes instead of relative ones
4. Not considering different output formats
5. Overriding too many theme elements
6. Not providing adequate documentation
7. Making themes too specific to one use case
8. Not considering accessibility