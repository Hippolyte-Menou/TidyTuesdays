[
  {
    "objectID": "TidyTuesdays.html",
    "href": "TidyTuesdays.html",
    "title": "TidyTuesdays",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "TidyTuesdays.html#quarto",
    "href": "TidyTuesdays.html#quarto",
    "title": "TidyTuesdays",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "2023-02-21 - Bob Ross Paintings/2023-02-21 - Bob Ross Paintings.html",
    "href": "2023-02-21 - Bob Ross Paintings/2023-02-21 - Bob Ross Paintings.html",
    "title": "Bob Ross Paintings",
    "section": "",
    "text": "Code\n# devtools::install_github(\"frankiethull/BobRossColors\")\n# devtools::install_github(\"ctesta01/ggtriangles\")\n\nlibrary(patchwork)\nlibrary(tidyverse)\nlibrary(colorspace)\nlibrary(BobRossColors)\nlibrary(ggtriangles)\n\n\n\n\nCode\nbob_ross &lt;- read_csv(\n  \"https://raw.githubusercontent.com/jwilber/Bob_Ross_Paintings/master/data/bob_ross_paintings.csv\") %&gt;% \n  select(-1) %&gt;% \n  mutate(across(Black_Gesso:Alizarin_Crimson, as.logical))\n\nbob_ross %&gt;% \n  glimpse()\n\n\nRows: 403\nColumns: 28\n$ painting_index   &lt;dbl&gt; 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292…\n$ img_src          &lt;chr&gt; \"https://www.twoinchbrush.com/images/painting282.webp…\n$ painting_title   &lt;chr&gt; \"A Walk in the Woods\", \"Mt. McKinley\", \"Ebony Sunset\"…\n$ season           &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,…\n$ episode          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4…\n$ num_colors       &lt;dbl&gt; 8, 8, 9, 3, 8, 4, 8, 8, 8, 8, 8, 4, 8, 12, 12, 13, 3,…\n$ youtube_src      &lt;chr&gt; \"https://www.youtube.com/embed/oh5p5f5_-7A\", \"https:/…\n$ colors           &lt;chr&gt; \"['Alizarin Crimson', 'Bright Red', 'Cadmium Yellow',…\n$ color_hex        &lt;chr&gt; \"['#4E1500', '#DB0000', '#FFEC00', '#102E3C', '#021E4…\n$ tags             &lt;chr&gt; \"['Forest', 'Autumn', 'Sunset/Sunrise', 'Landscape', …\n$ Black_Gesso      &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE,…\n$ Bright_Red       &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRU…\n$ Burnt_Umber      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Cadmium_Yellow   &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRU…\n$ Dark_Sienna      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Indian_Red       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Indian_Yellow    &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Liquid_Black     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Liquid_Clear     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Midnight_Black   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Phthalo_Blue     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Phthalo_Green    &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRU…\n$ Prussian_Blue    &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,…\n$ Sap_Green        &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRU…\n$ Titanium_White   &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,…\n$ Van_Dyke_Brown   &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,…\n$ Yellow_Ochre     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ Alizarin_Crimson &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRU…\n\n\n\n\nCode\ntheme_set(theme_minimal())\n\ntheme_update(\n  \n  plot.background = element_rect(fill = \"lightblue\", color = \"lightblue\"),\n  panel.background = element_rect(fill = \"lightyellow\", color = \"lightyellow\"),\n  \n  panel.grid.major=element_blank(),\n  panel.grid.minor = element_blank(),\n  \n  axis.title = element_blank(),\n  axis.text = element_blank(),\n  \n  legend.position = \"none\"\n)\n\n\n\nHow many paintings per season?\nThere are 13 paintings per season every season for 31 season\n\n\nCode\nbob_ross %&gt;% \n  group_by(season) %&gt;% \n  summarise(paintings = n()) %&gt;% \n  arrange(desc(paintings))\n\n\n# A tibble: 31 × 2\n   season paintings\n    &lt;dbl&gt;     &lt;int&gt;\n 1      1        13\n 2      2        13\n 3      3        13\n 4      4        13\n 5      5        13\n 6      6        13\n 7      7        13\n 8      8        13\n 9      9        13\n10     10        13\n# ℹ 21 more rows\n\n\n\n\nHow many colors does Bob Ross uses per painting ?\n\n\nCode\nbob_ross %&gt;% \n  summarise(median=median(num_colors))\n\n\n# A tibble: 1 × 1\n  median\n   &lt;dbl&gt;\n1     11\n\n\nCode\nbob_ross %&gt;% \n  count(num_colors, sort=T) %&gt;% \n  summarise(mean = weighted.mean(num_colors, n))\n\n\n# A tibble: 1 × 1\n   mean\n  &lt;dbl&gt;\n1  10.7\n\n\nCode\nbob_ross %&gt;% \n  count(num_colors, sort=T) %&gt;% \n  arrange(num_colors) %&gt;% \n  add_tally(n, name=\"total_paintings\") %&gt;% \n  mutate(sum_colors = cumsum(n),\n         perc = round(sum_colors / total_paintings, 2)) \n\n\n# A tibble: 14 × 5\n   num_colors     n total_paintings sum_colors  perc\n        &lt;dbl&gt; &lt;int&gt;           &lt;int&gt;      &lt;int&gt; &lt;dbl&gt;\n 1          1     1             403          1  0   \n 2          3     4             403          5  0.01\n 3          4     4             403          9  0.02\n 4          5     5             403         14  0.03\n 5          6    11             403         25  0.06\n 6          7    23             403         48  0.12\n 7          8    26             403         74  0.18\n 8          9    30             403        104  0.26\n 9         10    44             403        148  0.37\n10         11    75             403        223  0.55\n11         12    98             403        321  0.8 \n12         13    63             403        384  0.95\n13         14    12             403        396  0.98\n14         15     7             403        403  1   \n\n\nCode\nbob_ross %&gt;% \n  summarise(interval = list(quantile(num_colors, probs = c(0.05, 0.1, 0.9, 0.95)))) %&gt;%\n  unnest_wider(interval)\n\n\n# A tibble: 1 × 4\n   `5%` `10%` `90%` `95%`\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     6     7    13    13\n\n\nCode\ncolor_numbers &lt;- bob_ross %&gt;% \n  left_join(bob_ross %&gt;% count(num_colors), by=\"num_colors\")\n\nindian_red &lt;- \"#CD5C5C\"\n\ncolor_number_plot &lt;- color_numbers %&gt;% \n  ggplot(aes(x=num_colors)) + \n  geom_boxplot(aes(y=120), width=10, outliers=F, staplewidth =0.5, fill=indian_red) + \n  \n  geom_bar(stat = \"count\", fill=indian_red) + \n  \n  scale_x_continuous(breaks = 1:15) +\n  scale_y_continuous(breaks = seq(0, 100, 20), expand = c(0, 0.1), limits = c(0,130)) +\n  \n  labs(title=\"One Color or Many? How Many Colors Make a Masterpiece\", \n       x = \"Number of colours used by Bob Ross in his paintings\", \n       y =\"\") +\n  \n  theme(\n    plot.title = element_text(hjust=0.5, size=24),\n    axis.text = element_text(),\n    axis.title = element_text(),\n    panel.grid.major.y = element_line(),\n    plot.margin = margin(t = 20, r = 10, b = 10, l = 10)\n  )\n\ncolor_number_plot\n\n\n\n\n\n\n\n\n\nBob Ross used on average more than 10 colors in his paintings (mean = 10.7 with a median = 11) and up to 15 colors in 7 of them. In 90% of his paintings, between 6 and 13 colors are used.\nBob Ross used only one color of paint in this painting : “Contemplative Lady” was composed using only Van Dyke Brown which he declined in multiple shades.\n\n\nCode\nbob_ross %&gt;%\n  filter(num_colors==1)\n\n\n# A tibble: 1 × 28\n  painting_index img_src    painting_title season episode num_colors youtube_src\n           &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      \n1             89 https://w… Contemplative…     16       6          1 https://ww…\n# ℹ 21 more variables: colors &lt;chr&gt;, color_hex &lt;chr&gt;, tags &lt;chr&gt;,\n#   Black_Gesso &lt;lgl&gt;, Bright_Red &lt;lgl&gt;, Burnt_Umber &lt;lgl&gt;,\n#   Cadmium_Yellow &lt;lgl&gt;, Dark_Sienna &lt;lgl&gt;, Indian_Red &lt;lgl&gt;,\n#   Indian_Yellow &lt;lgl&gt;, Liquid_Black &lt;lgl&gt;, Liquid_Clear &lt;lgl&gt;,\n#   Midnight_Black &lt;lgl&gt;, Phthalo_Blue &lt;lgl&gt;, Phthalo_Green &lt;lgl&gt;,\n#   Prussian_Blue &lt;lgl&gt;, Sap_Green &lt;lgl&gt;, Titanium_White &lt;lgl&gt;,\n#   Van_Dyke_Brown &lt;lgl&gt;, Yellow_Ochre &lt;lgl&gt;, Alizarin_Crimson &lt;lgl&gt;\n\n\nCode\n# Contemplative Lady\n\nshow_colors_and_paintings(paintings = c(\"contemplative_lady\"))\n\n\n\n\n\n\n\n\n\n\n\nWhat are the most frequent colors used by Bob Ross\n\n\nCode\nmost_frequent_used_colours &lt;- bob_ross %&gt;% \n  summarise(across(Black_Gesso:Alizarin_Crimson, sum)) %&gt;% \n  pivot_longer(Black_Gesso:Alizarin_Crimson, names_to = \"color\", values_to = \"count\") %&gt;% \n  arrange(desc(count)) %&gt;% \n  mutate(color = fct_reorder(color, count)) %&gt;% \n  mutate(color = str_replace_all(color, \"_\", \"\")) %&gt;% \n  left_join(unique_bob_ross_colors)\n\ncolor_palette &lt;- most_frequent_used_colours$color_hex\nnames(color_palette) &lt;- most_frequent_used_colours$color\ncolor_palette\n\n\n  TitaniumWhite AlizarinCrimson    VanDykeBrown   CadmiumYellow     YellowOchre \n      \"#FFFFFF\"       \"#4E1500\"       \"#221B15\"       \"#FFEC00\"       \"#C79B00\" \n    PhthaloBlue       BrightRed   MidnightBlack        SapGreen    IndianYellow \n      \"#0C0040\"       \"#DB0000\"       \"#000000\"       \"#0A3410\"       \"#FFB800\" \n     DarkSienna    PrussianBlue    PhthaloGreen      BlackGesso      BurntUmber \n      \"#5F2E1F\"       \"#021E44\"       \"#102E3C\"       \"#000000\"       \"#8A3324\" \n    LiquidClear     LiquidBlack       IndianRed \n      \"#FFFFFF\"       \"#000000\"       \"#CD5C5C\" \n\n\nCode\nmost_frequent_colors_plot &lt;- most_frequent_used_colours %&gt;% \n  ggplot(aes(x=fct_reorder(color, count), y=count, fill=color)) + \n  geom_col() + \n  coord_flip() +\n  ylim(0, 403) +\n  scale_y_continuous(limits=c(0,410), expand = c(0,0)) +\n  \n  scale_fill_manual(values=color_palette) + \n  labs(title=\"Bob Ross's Favorite Hues\", \n       # subtitle=\"Starting with Titanium White\",\n       x = NA, y = NA) +\n  theme(\n    plot.title = element_text(hjust=0.5, size=24),\n    plot.subtitle = element_text(hjust=0.5, size=16),\n\n    axis.text = element_text(),\n    axis.ticks = element_line(),\n    panel.grid.major.x = element_line(),\n    plot.margin = margin(t = 20, r = 10, b = 10, l = 10)\n  )\n\nmost_frequent_colors_plot\n\n\n\n\n\n\n\n\n\n\n\nCode\nget_luminance &lt;- function(color) {\n  rgb_color &lt;- col2rgb(color) / 255\n  0.2126 * rgb_color[1,] + 0.7152 * rgb_color[2,] + 0.0722 * rgb_color[3,]\n}\n\nlegend_colors &lt;- most_frequent_used_colours %&gt;% \n  mutate(\n    label = color %&gt;%\n      str_split(\"(?=[A-Z])\") %&gt;% \n      map_chr(~ str_c(.x, collapse = \" \")) %&gt;% \n      str_c(color_hex, sep=\"\\n\"),\n    \n    text_color = if_else(get_luminance(color_hex) &gt; 0.5, \"black\", \"white\")) \nlegend_colors\n\n\n# A tibble: 18 × 5\n   color           count color_hex label                        text_color\n   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;                        &lt;chr&gt;     \n 1 TitaniumWhite     400 #FFFFFF   \" Titanium White\\n#FFFFFF\"   black     \n 2 AlizarinCrimson   380 #4E1500   \" Alizarin Crimson\\n#4E1500\" white     \n 3 VanDykeBrown      371 #221B15   \" Van Dyke Brown\\n#221B15\"   white     \n 4 CadmiumYellow     346 #FFEC00   \" Cadmium Yellow\\n#FFEC00\"   black     \n 5 YellowOchre       327 #C79B00   \" Yellow Ochre\\n#C79B00\"     black     \n 6 PhthaloBlue       323 #0C0040   \" Phthalo Blue\\n#0C0040\"     white     \n 7 BrightRed         321 #DB0000   \" Bright Red\\n#DB0000\"       white     \n 8 MidnightBlack     317 #000000   \" Midnight Black\\n#000000\"   white     \n 9 SapGreen          306 #0A3410   \" Sap Green\\n#0A3410\"        white     \n10 IndianYellow      293 #FFB800   \" Indian Yellow\\n#FFB800\"    black     \n11 DarkSienna        290 #5F2E1F   \" Dark Sienna\\n#5F2E1F\"      white     \n12 PrussianBlue      263 #021E44   \" Prussian Blue\\n#021E44\"    white     \n13 PhthaloGreen      116 #102E3C   \" Phthalo Green\\n#102E3C\"    white     \n14 BlackGesso        114 #000000   \" Black Gesso\\n#000000\"      white     \n15 BurntUmber         55 #8A3324   \" Burnt Umber\\n#8A3324\"      white     \n16 LiquidClear        51 #FFFFFF   \" Liquid Clear\\n#FFFFFF\"     black     \n17 LiquidBlack        19 #000000   \" Liquid Black\\n#000000\"     white     \n18 IndianRed           0 #CD5C5C   \" Indian Red\\n#CD5C5C\"       white     \n\n\nCode\nlegend_plot &lt;- legend_colors %&gt;% \n  ggplot(aes(y = fct_reorder(color, count), x=0)) + \n  geom_tile(aes(fill=color)) + \n  coord_fixed(ratio = 1) + \n  \n  geom_text(aes(label=label, color = text_color)) +\n  \n  scale_color_identity() +\n  scale_fill_manual(values=color_palette) \n\nlegend_plot\n\n\n\n\n\n\n\n\n\n\n\nCode\nfacet_title &lt;- str_c(\"Season \", 1:31)\nfacet_title[-c(1,6,11,16,21,26,31)] &lt;- \"\"  # Only write the season title for these seasons\nnames(facet_title) &lt;- 1:31\nfacet_title\n\n\n          1           2           3           4           5           6 \n \"Season 1\"          \"\"          \"\"          \"\"          \"\"  \"Season 6\" \n          7           8           9          10          11          12 \n         \"\"          \"\"          \"\"          \"\" \"Season 11\"          \"\" \n         13          14          15          16          17          18 \n         \"\"          \"\"          \"\" \"Season 16\"          \"\"          \"\" \n         19          20          21          22          23          24 \n         \"\"          \"\" \"Season 21\"          \"\"          \"\"          \"\" \n         25          26          27          28          29          30 \n         \"\" \"Season 26\"          \"\"          \"\"          \"\"          \"\" \n         31 \n\"Season 31\" \n\n\nCode\nall_seasons_colors &lt;- bob_ross %&gt;% \n  pivot_longer(Black_Gesso:Alizarin_Crimson, names_to = \"color\") %&gt;% \n  mutate(color = str_replace_all(color, \"_\", \"\")) %&gt;% \n  filter(value) %&gt;% \n  left_join(most_frequent_used_colours, by=\"color\")\n\nall_seasons_colors\n\n\n# A tibble: 4,292 × 14\n   painting_index img_src   painting_title season episode num_colors youtube_src\n            &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      \n 1            282 https://… A Walk in the…      1       1          8 https://ww…\n 2            282 https://… A Walk in the…      1       1          8 https://ww…\n 3            282 https://… A Walk in the…      1       1          8 https://ww…\n 4            282 https://… A Walk in the…      1       1          8 https://ww…\n 5            282 https://… A Walk in the…      1       1          8 https://ww…\n 6            282 https://… A Walk in the…      1       1          8 https://ww…\n 7            282 https://… A Walk in the…      1       1          8 https://ww…\n 8            282 https://… A Walk in the…      1       1          8 https://ww…\n 9            283 https://… Mt. McKinley        1       2          8 https://ww…\n10            283 https://… Mt. McKinley        1       2          8 https://ww…\n# ℹ 4,282 more rows\n# ℹ 7 more variables: colors &lt;chr&gt;, color_hex.x &lt;chr&gt;, tags &lt;chr&gt;, color &lt;chr&gt;,\n#   value &lt;lgl&gt;, count &lt;int&gt;, color_hex.y &lt;chr&gt;\n\n\nCode\nall_seasons_plot &lt;- all_seasons_colors %&gt;% \n  ggplot(aes(x=episode, y=fct_reorder(color, count))) + \n  geom_tile(aes(color=color, fill=color), width = 1, height = 1) + \n  coord_fixed(ratio = 1) +\n  facet_wrap(~season, ncol=5, labeller = labeller(season = facet_title), strip.position = \"left\") + \n  \n  scale_color_manual(values=color_palette) + \n  scale_fill_manual(values=color_palette) + \n  \n  theme(\n    \n    plot.background = element_rect(fill = \"lightblue\"),\n    panel.background = element_rect(fill = \"lightyellow\"),\n    \n    panel.grid.major=element_blank(),\n    panel.grid.minor = element_blank(),\n    \n    axis.title = element_blank(),\n    axis.text = element_blank())\n\nall_seasons_plot\n\n\n\n\n\n\n\n\n\n\n\nCode\ntotal_width &lt;- 4500 + 4000\nlegend_width &lt;- 1000\nlegend_ratio &lt;- legend_width / total_width\nall_ratio &lt;- 1 - legend_ratio\n\n\ndesign &lt;- \"\n  123\n  124\n  12#\n\"\n\nbob_ross_colors &lt;- all_seasons_plot + legend_plot + color_number_plot + most_frequent_colors_plot +\n  plot_layout(design = design, widths = c(all_ratio, legend_ratio, all_ratio)) + \n  plot_annotation(title = \"The Joy of Color: Bob Ross's Happy Little Palette\",\n                  subtitle = \"\",\n                  caption = \"Data source: Jared Wilber's data on Bob Ross Paintings via @frankiethull Bob Ross Colors data package\",\n                  \n                  theme = theme(plot.title = element_text(size = 32, hjust = 0.5)))\n\nbob_ross_colors\n\n\n\n\n\n\n\n\n\nCode\nggsave(\"bob_ross_colors.png\", bob_ross_colors, path=\"Plots\", width = total_width, height = 7000, units = \"px\", bg=\"white\")\n\n\n\n\nWhich colors are used together\n\n\nCode\nrow_occurance &lt;- bob_ross %&gt;% \n  select(painting_index, Black_Gesso:Alizarin_Crimson) %&gt;%\n  pivot_longer(Black_Gesso:Alizarin_Crimson, names_to = \"color\", values_to = \"n\")\n\n\nco_occurence &lt;- row_occurance %&gt;%\n  left_join(row_occurance, by = \"painting_index\") %&gt;%\n  mutate(occurence = if_else(n.x & n.y, 1, 0)) %&gt;% \n  group_by(color.x, color.y) %&gt;%\n  summarise(Occurance = sum(occurence)) %&gt;%\n  spread(key = \"color.y\", value = \"Occurance\", fill = 0) %&gt;% \n  rename(Color = \"color.x\")\n\nco_occurence\n\n\n# A tibble: 18 × 19\n# Groups:   Color [18]\n   Color      Alizarin_Crimson Black_Gesso Bright_Red Burnt_Umber Cadmium_Yellow\n   &lt;chr&gt;                 &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;\n 1 Alizarin_…              380         106        311          53            335\n 2 Black_Ges…              106         114         89          16            101\n 3 Bright_Red              311          89        321          47            303\n 4 Burnt_Umb…               53          16         47          55             52\n 5 Cadmium_Y…              335         101        303          52            346\n 6 Dark_Sien…              277          84        242           0            256\n 7 Indian_Red                0           0          0           0              0\n 8 Indian_Ye…              285          85        265          42            283\n 9 Liquid_Bl…               19           0         16           1             16\n10 Liquid_Cl…               49          29         35           0             44\n11 Midnight_…              302          93        258           2            275\n12 Phthalo_B…              314          95        268          45            285\n13 Phthalo_G…              114          30        103          33            110\n14 Prussian_…              246          65        210          34            224\n15 Sap_Green               299          90        270          50            295\n16 Titanium_…              378         112        319          54            345\n17 Van_Dyke_…              354         103        304          53            327\n18 Yellow_Oc…              317          92        290          49            311\n# ℹ 13 more variables: Dark_Sienna &lt;dbl&gt;, Indian_Red &lt;dbl&gt;,\n#   Indian_Yellow &lt;dbl&gt;, Liquid_Black &lt;dbl&gt;, Liquid_Clear &lt;dbl&gt;,\n#   Midnight_Black &lt;dbl&gt;, Phthalo_Blue &lt;dbl&gt;, Phthalo_Green &lt;dbl&gt;,\n#   Prussian_Blue &lt;dbl&gt;, Sap_Green &lt;dbl&gt;, Titanium_White &lt;dbl&gt;,\n#   Van_Dyke_Brown &lt;dbl&gt;, Yellow_Ochre &lt;dbl&gt;\n\n\nCode\ncolors_used_together &lt;- co_occurence %&gt;% \n  pivot_longer(Alizarin_Crimson:Yellow_Ochre, names_to = \"Pair\", values_to = \"n\") %&gt;% \n  mutate(Color = str_replace_all(Color, \"_\", \"\"), Pair = str_replace_all(Pair, \"_\", \"\"))\n\ncolors_used_together %&gt;% \n  arrange(-n)\n\n\n# A tibble: 324 × 3\n# Groups:   Color [18]\n   Color           Pair                n\n   &lt;chr&gt;           &lt;chr&gt;           &lt;dbl&gt;\n 1 TitaniumWhite   TitaniumWhite     400\n 2 AlizarinCrimson AlizarinCrimson   380\n 3 AlizarinCrimson TitaniumWhite     378\n 4 TitaniumWhite   AlizarinCrimson   378\n 5 VanDykeBrown    VanDykeBrown      371\n 6 TitaniumWhite   VanDykeBrown      369\n 7 VanDykeBrown    TitaniumWhite     369\n 8 AlizarinCrimson VanDykeBrown      354\n 9 VanDykeBrown    AlizarinCrimson   354\n10 CadmiumYellow   CadmiumYellow     346\n# ℹ 314 more rows\n\n\nCode\nused_together_plot &lt;- colors_used_together %&gt;% \n  ggplot(aes(x=fct_reorder(Color, -n), y=fct_reorder(Pair, n))) +\n  geom_point(shape=21, aes(colour=Color, fill=Pair, size=n/400), stroke=1.5) +\n  \n  coord_fixed(ratio = 1) +\n\n  scale_fill_manual(values=color_palette) + \n  scale_colour_manual(values=color_palette) + \n  \n  theme()\n\nused_together_plot",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2023-02-21 - Bob Ross Paintings"
    ]
  },
  {
    "objectID": "2018-04-03 - US Tuition Costs/2018-04-03 - US Tuition Costs.html",
    "href": "2018-04-03 - US Tuition Costs/2018-04-03 - US Tuition Costs.html",
    "title": "2018-04-03 - US Tuition Costs",
    "section": "",
    "text": "Introduction\nThis analysis explores the evolution of university tuition costs across different states in the United States over a twelve-year period (2004-2016). We’ll investigate patterns in tuition increases, state-by-state variations, and potential relationships between initial costs and growth rates.\n\n\nData Preparation\nWe begin by loading necessary libraries for data manipulation, visualization, and formatting. Our visual theme is minimalist, using a custom color palette and the Fira Sans font family. We’ve also set up currency formatting for clearer presentation of dollar amounts.\n\n\nCode\nlibrary(glue)\nlibrary(scales)\nlibrary(ggtext)\nlibrary(ggdist)\nlibrary(readxl)\nlibrary(paletteer)\nlibrary(patchwork)\nlibrary(tidyverse)\n\n\n\n\nCode\ntheme_set(theme_minimal())\n\ntheme_update(\n  legend.position = \"None\"\n)\n\nfont_family &lt;- \"Fira Sans\"\n\npalette &lt;- c(\"#D3F2A3FF\", \"#97E196FF\", \"#6CC08BFF\", \"#4C9B82FF\", \"#217A79FF\", \"#105965FF\", \"#074050FF\")\n\n\nlabel_dollars &lt;- label_currency(accuracy = 1)\n\n\nThe dataset contains average tuition costs by state from 2004-05 to 2015-16 academic years. We reshape the data into a longer format to facilitate various types of analysis.\n\n\nCode\nus_avg_tuition &lt;- read_xlsx(\"us_avg_tuition.xlsx\")\n\nus_avg_tuition_longer &lt;- us_avg_tuition %&gt;% \n  pivot_longer(`2004-05`:`2015-16`, names_to = \"Season\", values_to = \"avg_tuition\") \n\nus_avg_tuition_longer %&gt;% \n  glimpse()\n\n\nRows: 600\nColumns: 3\n$ State       &lt;chr&gt; \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Al…\n$ Season      &lt;chr&gt; \"2004-05\", \"2005-06\", \"2006-07\", \"2007-08\", \"2008-09\", \"20…\n$ avg_tuition &lt;dbl&gt; 5682.838, 5840.550, 5753.496, 6008.169, 6475.092, 7188.954…\n\n\n\n\nHow did tuition costs increased over time ?\nOur analysis reveals several interesting patterns in tuition cost evolution:\n\nOverall Growth Patterns: We categorize states into six groups based on their tuition increase rates:\n\nDecrease : Only one state had an decrease in the average tuition costs (Ohio)\nSlow increase (0-23%)\nBelow median increase (23-50%)\nAbove median increase (50-75%)\nFast increase (75-100%)\nMore than double increase (&gt;100%) : Multiple states had more than doubled\n\nDistribution Changes: The visualization shows how tuition costs have become more concentrated around the median over time, with some notable exceptions at the upper end. The median tuition increased from ${label_dollars(median_tuition_2005)} in 2004-05 to ${label_dollars(median_tuition_2015)} in 2015-16.\nConsistency of Increases: Interestingly, despite the 2008 financial crisis, tuition increases remained relatively consistent, with continued growth resuming immediately in the following year.\n\n\n\nCode\nus_avg_tuition %&gt;% \n  mutate(difference = `2015-16` - `2004-05`) %&gt;% \n  ggplot(aes(x = fct_reorder(State, difference))) + \n  geom_col(aes(y = `2015-16`), fill = \"red\") + \n  geom_col(aes(y = `2004-05`), fill = \"orange\") + \n  geom_col(aes(y = - difference)) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nCode\ndiff_cutoff &lt;- c(0, 0.23, 0.5, 0.75, 1)\ndiff_cutoff_names &lt;- c(\"Decrease\", \"Slow increase\", \"Below median increase\", \"Above median increase\", \"Fast increase\", \"More than double increase\")\n\nus_avg_tuition %&gt;% \n  mutate(difference = `2015-16` - `2004-05`,\n         diff_perc = round(difference / `2004-05`, 2),\n         diff_group = cut(\n           diff_perc, \n           breaks = c(-Inf, diff_cutoff, Inf), \n           labels = diff_cutoff_names,\n           right = FALSE),\n         diff_group = factor(diff_group, levels=diff_cutoff_names)) %&gt;% \n  pivot_longer(`2004-05`:`2015-16`, names_to = \"Season\", values_to = \"avg_tuition\")  %&gt;% \n  filter(Season %in% c(\"2004-05\", \"2015-16\")) %&gt;% \n  \n  ggplot(aes(x = Season, avg_tuition, group=State)) + \n  geom_point(aes(color=Season)) + \n  geom_line() + \n  facet_wrap(diff_group~., nrow=1)\n\n\n\n\n\n\n\n\n\nCode\nus_avg_tuition %&gt;% \n  mutate(difference = `2015-16` - `2004-05`) %&gt;% \n  ggplot(aes(x = `2004-05`, y = `2015-16`)) + \n  geom_segment(aes(x = `2004-05`, y = `2004-05`, xend = `2004-05`, yend = `2015-16`, colour = \"segment\"), size=1, alpha=0.8) + \n  geom_point(size=4, alpha=0.5) + \n  geom_abline(slope = 1, intercept = 0, size=2) + \n  \n  lims(x= c(0 , NA), y = c(0 , NA))\n\n\n\n\n\n\n\n\n\nCode\n# us_avg_tuition %&gt;% \n#   mutate(difference = `2015-16` - `2004-05`,\n#          diff_perc = round(difference / `2004-05`, 2)) %&gt;% \n#   ggplot(aes(group=State)) + \n#     geom_point(aes(x=\"A\", y=0)) + \n#     geom_point(aes(x = \"B\", y=diff_perc))\n\nmedian_tuition &lt;- us_avg_tuition_longer %&gt;% \n  group_by(Season) %&gt;% \n  summarize(median = median(avg_tuition)) %&gt;% \n  ungroup() \n\nmedian_tuition_2005 &lt;- median_tuition %&gt;% filter(Season == \"2004-05\") %&gt;% head(1) %&gt;% pull(median)\nmedian_tuition_2015 &lt;- median_tuition %&gt;% filter(Season == \"2015-16\") %&gt;% head(1) %&gt;% pull(median)\n\nus_avg_tuition %&gt;% \n  pivot_longer(`2004-05`:`2015-16`, names_to = \"Season\", values_to = \"avg_tuition\")  %&gt;% \n  \n  ggplot(aes(x = avg_tuition, y=Season)) + \n  geom_vline(xintercept = median_tuition_2005, col = \"grey30\", lty = \"dashed\") +\n  annotate(\"text\", y = 0.5, x = median_tuition_2005 + 50, label = \"Median tuition in 2004/05\", size = 3, hjust = 0) +\n  annotate(\"text\", y = 0.5, x = median_tuition_2005 - 50, label = label_dollars(median_tuition_2005), size = 3, hjust = 1) +\n  \n  \n  geom_vline(xintercept = median_tuition_2015, col = \"grey30\", lty = \"dashed\") +\n  annotate(\"text\", y = 0.5, x = median_tuition_2015 + 50, label = \"Median tuition in 2015/16\", size = 3, hjust = 0) +\n  annotate(\"text\", y = 0.5, x = median_tuition_2015 - 50, label = label_dollars(median_tuition_2015),\n           size = 3, hjust = 1) +\n  \n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  \n  scale_y_discrete(expand = expansion(add = c(1, 0))) +\n  scale_x_continuous(labels = scales::dollar_format()) +\n  \n  scale_color_manual(values = palette)\n\n\n\n\n\n\n\n\n\nThe “lagging university increased faster to get more concentrated around the mean. A few escaped to reach the top\nNo increase in 2008 yet the trend is consistent as soon as the following year\n\n\nAverage tuition cost trends over time ?\n\n\nDid cheaper schools made their price increase faster ?",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2018-04-03 - US Tuition Costs"
    ]
  },
  {
    "objectID": "2019-02-26 - French Train Delays/2019-02-26 - French Train Delays.html",
    "href": "2019-02-26 - French Train Delays/2019-02-26 - French Train Delays.html",
    "title": "French Train Delays",
    "section": "",
    "text": "This data story explores delays in French train services, with a particular focus on international connections. The dataset comes from the TidyTuesday project and contains information about train delays, journey times across all French stations.\nhttps://twitter.com/noccaea/status/1095735292206739456",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2019-02-26 - French Train Delays"
    ]
  },
  {
    "objectID": "2019-02-26 - French Train Delays/2019-02-26 - French Train Delays.html#data-import-and-processing",
    "href": "2019-02-26 - French Train Delays/2019-02-26 - French Train Delays.html#data-import-and-processing",
    "title": "French Train Delays",
    "section": "Data Import and Processing",
    "text": "Data Import and Processing\nWe import two datasets: full_trains and small_trains, with the latter being a subset of the former. To properly categorize international services, we create a list of international stations and a helper function to identify international routes. This allows us to fill in missing service types based on whether either the departure or arrival station is international.\nLet’s examine the structure of our processed dataset:\n\n\nCode\nfull_trains &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2019/2019-02-26/full_trains.csv\")\nsmall_trains &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2019/2019-02-26/small_trains.csv\") \n\ninternational_stations &lt;- c(\"ZURICH\", \"LAUSANNE\", \"GENEVE\", \"ITALIE\", \"STUTTGART\", \"FRANCFORT\", \"MADRID\", \"BARCELONA\")\n\nis_international &lt;- function(x){x %in% international_stations}\n\nsmall_trains &lt;- small_trains %&gt;% \n  mutate(service = if_else(is.na(service), \n                           if_else(is_international(departure_station) | is_international(arrival_station), \"International\", \"National\"), \n                           service))\n\nsmall_trains %&gt;% \n  glimpse\n\n\nRows: 32,772\nColumns: 13\n$ year                    &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017…\n$ month                   &lt;dbl&gt; 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9…\n$ service                 &lt;chr&gt; \"National\", \"National\", \"National\", \"National\"…\n$ departure_station       &lt;chr&gt; \"PARIS EST\", \"REIMS\", \"PARIS EST\", \"PARIS LYON…\n$ arrival_station         &lt;chr&gt; \"METZ\", \"PARIS EST\", \"STRASBOURG\", \"AVIGNON TG…\n$ journey_time_avg        &lt;dbl&gt; 85.13378, 47.06452, 116.23494, 161.08958, 164.…\n$ total_num_trips         &lt;dbl&gt; 299, 218, 333, 481, 190, 191, 208, 216, 661, 2…\n$ avg_delay_all_departing &lt;dbl&gt; 0.7520067, 1.2635177, 1.1392570, 1.4062153, 1.…\n$ avg_delay_all_arriving  &lt;dbl&gt; 0.4198439, 1.1375576, 1.5863956, 4.7885417, 6.…\n$ num_late_at_departure   &lt;dbl&gt; 15, 10, 20, 36, 16, 18, 49, 24, 141, 23, 33, 5…\n$ num_arriving_late       &lt;dbl&gt; 17, 23, 19, 61, 38, 18, 38, 37, 122, 26, 64, 6…\n$ delay_cause             &lt;chr&gt; \"delay_cause_external_cause\", \"delay_cause_ext…\n$ delayed_number          &lt;dbl&gt; 0.25000000, 0.25000000, 0.21428571, 0.15517241…",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2019-02-26 - French Train Delays"
    ]
  },
  {
    "objectID": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html",
    "href": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html",
    "title": "European Drug Development",
    "section": "",
    "text": "This analysis explores drug development and approval patterns in Europe, focusing particularly on orphan drugs - medicines developed specifically for rare diseases. The data comes from the European Medicines Agency (EMA) via Miquel Anglada Girotto on GitHub. Miquel wrote about his exploration of the data.\nWe used the source table of all EPARs for human and veterinary medicines, rather than Miquel’s scraped data. It includes information about drug authorizations, therapeutic areas, and timelines from 1995 to 2022.",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2023-03-14 - European Drug Development"
    ]
  },
  {
    "objectID": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#temporal-analysis-1995-2022",
    "href": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#temporal-analysis-1995-2022",
    "title": "European Drug Development",
    "section": "Temporal Analysis (1995-2022):",
    "text": "Temporal Analysis (1995-2022):\n\nShows the yearly number of drug evaluations by the EMA\nHighlights the impact of EU orphan regulation (effective 2000)\nDemonstrates the relatively slow initial uptake of orphan drug submissions\nNotes the recent trend, with only 20 orphan drugs submitted in 2022\n\n\n\nCode\njack_bush_palette &lt;- paletteer_d(\"lisa::JackBush_1\")\nnames(jack_bush_palette) &lt;- c(\"Drug authorised\", \"Drug withdrawn\", \"Orphan drug authorised\", \"Orphan drug withdrawn\")\njack_bush_palette\n\n\n&lt;colors&gt;\n#A1D8B6FF #D2C48EFF #F45F40FF #F9AE8DFF #80B9CEFF \n\n\nCode\ntheme_set(theme_minimal())\ntheme_update(\n  # Legend Styling\n  legend.title = element_blank(), \n  legend.position = \"none\", \n  \n  # Title Styling\n  plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n  plot.subtitle = element_text(hjust = 0.5),\n  \n  \n  #\n  panel.grid.minor = element_blank(),\n  \n  # Margins\n  plot.margin = margin(t = 20, r = 20, b = 20, l = 20),\n)\n\n\n\n\nCode\norphan_drugs_years &lt;- drugs %&gt;% \n  mutate(year = year(date_of_opinion)) %&gt;%  # date_of_opinion, decision_date, first_published, marketing_authorisation_date, revision_date\n  filter(!is.na(year)) %&gt;% \n  group_by(orphan_medicine, authorisation_status) %&gt;% \n  count(year) %&gt;% \n  mutate(authorisation_status = if_else(authorisation_status==\"authorised\", T, F),\n         approved_orphan = case_when(\n           orphan_medicine & authorisation_status ~ \"Orphan drug authorised\",  # TRUE/TRUE\n           orphan_medicine & !authorisation_status ~ \"Orphan drug withdrawn\",  # TRUE/FALSE\n           !orphan_medicine & authorisation_status ~ \"Drug authorised\",   # FALSE/TRUE\n           !orphan_medicine & !authorisation_status ~ \"Drug withdrawn\"   # FALSE/FALSE\n         ) %&gt;% factor(levels=c(\"Drug withdrawn\", \"Drug authorised\", \"Orphan drug withdrawn\", \"Orphan drug authorised\")))  \n\norphan_drugs_years\n\n\n# A tibble: 82 × 5\n# Groups:   orphan_medicine, authorisation_status [4]\n   orphan_medicine authorisation_status  year     n approved_orphan\n   &lt;lgl&gt;           &lt;lgl&gt;                &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;          \n 1 FALSE           TRUE                  1995     4 Drug authorised\n 2 FALSE           TRUE                  1996     7 Drug authorised\n 3 FALSE           TRUE                  1997     5 Drug authorised\n 4 FALSE           TRUE                  1998    15 Drug authorised\n 5 FALSE           TRUE                  1999    13 Drug authorised\n 6 FALSE           TRUE                  2000    17 Drug authorised\n 7 FALSE           TRUE                  2001     7 Drug authorised\n 8 FALSE           TRUE                  2002    13 Drug authorised\n 9 FALSE           TRUE                  2003     8 Drug authorised\n10 FALSE           TRUE                  2004    16 Drug authorised\n# ℹ 72 more rows\n\n\n\n\nCode\norphan_years_plot &lt;- orphan_drugs_years %&gt;% \n  ggplot(aes(x=year, y=n, fill=approved_orphan)) + \n  geom_col() + \n  \n  scale_fill_manual(values=jack_bush_palette, breaks=c(\"Drug authorised\", \"Drug withdrawn\", \"Orphan drug authorised\", \"Orphan drug withdrawn\")) + \n  \n  scale_x_continuous(breaks=seq(1995, 2020, 5)) +\n  scale_y_continuous(breaks=seq(0, 120, 20)) +\n\n  # Number below horizon\n  geom_text(data = orphan_drugs_years %&gt;% filter(approved_orphan == \"Orphan drug authorised\"), aes(label=n), colour=\"#F45F40FF\", y = -2, fontface=\"bold\") +\n  \n  labs(x = \"Year of Opinion\",\n       y = \"Number of Drugs\", \n       title = \"Number of drugs evaluated by the \\n European Medicines Agency each year\",\n       subtitle = \"Submissions for orphan designation lagged after the EU orphan regulation became \\neffective in 2000. In 2022, only 20 orphan drugs were submitted for evaluation.\",\n       # caption = \"Data source: European Medicines Agency\",\n  ) +\n  \n  theme(\n    # Legend Styling\n    legend.position = \"bottom\", \n    legend.box.background = element_rect_round(fill = \"white\", colour = \"black\"),\n  )\n\norphan_years_plot",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2023-03-14 - European Drug Development"
    ]
  },
  {
    "objectID": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#overall-statistics",
    "href": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#overall-statistics",
    "title": "European Drug Development",
    "section": "Overall Statistics:",
    "text": "Overall Statistics:\n\nOrphan drugs represent 12% of all approved drugs\nBoth orphan and regular drugs maintain similar authorization rates of around 90%\nProvides a clear comparison of total volumes between regular and orphan drugs\n\n\n\nCode\norphan_drugs_summary &lt;- orphan_drugs_years %&gt;% \n  group_by(orphan_medicine, approved_orphan) %&gt;% \n  summarise(total = sum(n)) %&gt;% \n  ungroup %&gt;% group_by(orphan_medicine) %&gt;% add_tally(total) %&gt;% ungroup %&gt;% \n  mutate(perc = round(total / n, 2), perc2 = round(n / sum(total), 2))\n\norphan_drugs_summary\n\n\n# A tibble: 4 × 6\n  orphan_medicine approved_orphan        total     n  perc perc2\n  &lt;lgl&gt;           &lt;fct&gt;                  &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 FALSE           Drug withdrawn           105  1063   0.1  0.88\n2 FALSE           Drug authorised          958  1063   0.9  0.88\n3 TRUE            Orphan drug withdrawn     15   146   0.1  0.12\n4 TRUE            Orphan drug authorised   131   146   0.9  0.12\n\n\nCode\norphan_total_plot &lt;- orphan_drugs_summary %&gt;% \n  ggplot(aes(x = orphan_medicine, y = total, fill = approved_orphan)) + \n  geom_col() + \n  \n  # Number below the horizon\n  geom_text(data = orphan_drugs_summary %&gt;% filter(approved_orphan %in% c(\"Orphan drug authorised\", \"Drug authorised\")), aes(label=n), y=-20, fontface=\"bold\", colour=\"black\") + \n  \n  # Percentage of approval\n  geom_text(data = orphan_drugs_summary %&gt;% filter(approved_orphan %in% c(\"Orphan drug authorised\", \"Drug authorised\")), aes(label=percent(perc)), position = position_stack(vjust = .5), colour=\"darkgray\", fontface=\"bold\") + \n  \n  # Percentage of orphan drugs total\n  geom_text(data = orphan_drugs_summary %&gt;% filter(approved_orphan %in% c(\"Orphan drug authorised\", \"Drug authorised\")), aes(label=percent(perc2)), y=1100, fontface=\"bold\", size=6) + \n  \n  scale_fill_manual(values=jack_bush_palette, breaks=c(\"Drug authorised\", \"Drug withdrawn\", \"Orphan drug authorised\", \"Orphan drug withdrawn\")) +\n  scale_x_discrete(labels = c(\"FALSE\" = \"Drugs\", \"TRUE\" = \"Orphan drugs\")) +  # rename orphan drugs T/F\n  scale_y_continuous(breaks = seq(0, 1200, 200), expand = expansion(mult = c(0.05, 0.15))) +\n  \n  \n  labs(x = \"\",\n       y = \"Number of Drugs\", \n       title = \"Total Number of drugs evaluated by the \\n European Medicines Agency (1995-2022)\",\n       subtitle = \"Orphan drugs are 12% of drugs approved while authorisation \\n rates are around 90% for orphan drugs and regular drugs.\",\n       # caption = \"Data source: European Medicines Agency\"\n  ) +\n  \n  theme(\n    axis.title.x = element_blank()\n  )\n\norphan_total_plot",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2023-03-14 - European Drug Development"
    ]
  },
  {
    "objectID": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#orphan-drugs-plot",
    "href": "2023-03-14 - European Drug Development/2023-03-14 - European Drug Development.html#orphan-drugs-plot",
    "title": "European Drug Development",
    "section": "Orphan Drugs plot",
    "text": "Orphan Drugs plot\nThe combined visualization effectively tells the story of orphan drug development in Europe, from policy implementation to current trends, while maintaining perspective on their proportion within overall drug development.\n\n\nCode\nOrphan_drugs_plot &lt;- wrap_plots(orphan_years_plot, orphan_total_plot, ncol = 2, nrow = 1, widths = c(1, 0.33)) + \n  plot_annotation(title = 'Orphan drugs submitted for evaluation by the European Medicines Agency',\n                  subtitle = \"\",\n                  caption = \"Data source: European Medicines Agency\",\n                  \n                  # tag_levels = 'A', tag_prefix = \"Plot \",\n                  theme = theme(plot.title = element_text(size = 32)))\n\nOrphan_drugs_plot\n\n\n\n\n\n\n\n\n\nCode\nggsave(\"Orphan drugs plot.png\", Orphan_drugs_plot, path=\"Plots\", width = 5400, height = 3000, units = \"px\", bg=\"white\")",
    "crumbs": [
      "Home",
      "TidyTuesdays Data Stories",
      "2023-03-14 - European Drug Development"
    ]
  }
]